slug: writing-first-playbook
id: z1eg1d9cwmzk
type: track
title: Writing your first playbook
teaser: Learn about the basics of how to write an Ansible playbook to automate simple
  infrastructure tasks
description: |-
  Ansible is a simple yet powerful IT automation engine for application deployment, configuration management, and orchestration that you can learn quickly. This exercise covers using Ansible to build Apache web servers on Red Hat Enterprise Linux.

  ![Lab diagram](https://ansible.github.io/workshops/images/rhel_lab_diagram.png)

  This exercise covers the following Ansible fundamentals:

  * Understanding Ansible Module parameters
  * Understanding and using the following modules
    * yum module
    * service module
    * copy module
  * Understanding Idempotence and how Ansible Modules can be idempotent


  You can find more information about Ansible at [Ansible.com](https://www.ansible.com/)

  [**Try Ansible Automation Platform today!**](https://red.ht/try_ansible)
icon: https://www.ansible.com/hubfs/Logo-Red_Hat-Ansible-A-Reverse-SVG.svg
tags:
- ansible
- infrastructure
- gettingstarted
owner: redhat
developers:
- rwolters@redhat.com
- ade@instruqt.com
private: false
published: true
show_timer: true
challenges:
- slug: playbook-inventory
  id: 8hv4ky59wxum
  type: challenge
  title: Create an inventory
  teaser: Write your inventory, know whom Ansible talks to!
  notes:
  - type: text
    contents: Ansible works against multiple managed nodes or “hosts” in your infrastructure
      at the same time, using a list or group of lists known as inventory. For our
      first challenge, we are going to create an inventory to be used in the following
      challenges.
  - type: text
    contents: The inventory tells what nodes are out there to be used by Ansible,
      what credentials need to be used to connect to them, how the nodes are grouped,
      and other necessary variables.
  - type: text
    contents: |-
      An example inventory:

      ```
      [all:vars]
      ansible_user=rhel
      ansible_password=SomethingSomething
      ansible_port=22

      [web]
      websrv1
      websrv2

      [db]
      db_1 ansible_host=11.22.33.44
      db_2 ansible_host=44.55.66.77
      ```
  assignment: |-
    On your control host, we are using a simple directory structure in our home directory for the inventory and future playbooks, the directory `ansible-files`

    Open the editor tab, log in with the password `ansible123!`, open the directory `ansible-files` and in that directory create the file `hosts` with the content:

    ```
    [web]
    node1
    node2
    ```
  tabs:
  - title: editor
    type: service
    hostname: control
    path: /editor/
    port: 443
  difficulty: basic
  timelimit: 300
- slug: playbook-directory-structure
  id: hqds4s7kqqmy
  type: challenge
  title: Creating a Directory Structure and your Playbook
  teaser: Write the first playbook
  notes:
  - type: text
    contents: |-
      Playbooks are files which describe the desired configurations or steps to implement on managed hosts. Playbooks can change lengthy, complex administrative tasks into easily repeatable routines with predictable and successful outcomes.

      A playbook can have multiple plays and a play can have one or multiple tasks. In a task a module is called, like the modules in the previous chapter. The goal of a play is to map a group of hosts. The goal of a task is to implement modules against those ho
  - type: text
    contents: |-
      Playbooks are text files written in YAML format and therefore need:

      * to start with three dashes (---)
      * proper indentation using spaces and not tabs!

      There are some important concepts:

      * hosts: the managed hosts to perform the tasks on
      * tasks: the operations to be performed by invoking Ansible modules and passing them the necessary options.
      * become: privilege escalation in Playbooks, same as using -b in the ad hoc command.
  - type: text
    contents: Good Playbooks are idempotent, so if a Playbook is run once to put the
      hosts in the correct state, it should be safe to run it a second time and it
      should make no further changes to the hosts.
  - type: text
    contents: |-
      In this challenge you create a playbook to set up an Apache web server in three steps:

      1. Install httpd package
      1. Enable/start httpd service
      1. Copy over an web.html file to each web host
  - type: text
    contents: |-
      The Playbook makes sure the package containing the Apache web server is installed.

      There is a best practice on the preferred directory structures for playbooks. We strongly encourage you to read and understand these practices as you develop your Ansible ninja skills. That said, our playbook today is very basic and creating a complex structure will just confuse things.

      Instead, we are going to use the simple directory structure for our playbook, and add just a couple of files to it.
  assignment: |
    Next we will write the playbook. In the editor, create a file called `apache.yml` in the directory `ansible-files` with the following content.

    ```
    ---
    - name: Apache server installed
      hosts: node1
      become: yes
    ```

    This shows one of Ansible’s strengths: The Playbook syntax is easy to read and understand. In this Playbook:

    * A name is given for the play via `name:`.
    * The host to run the playbook against is defined via `hosts:`.
    * We enable user privilege escalation with `become:`.

    Now that we’ve defined the play, let’s add a task to get something done. We will add a task in which yum will ensure that the Apache package is installed in the latest version. Modify the file so that it looks like the following listing:

    ```
    ---
    - name: Apache server installed
      hosts: node1
      become: yes
      tasks:
      - name: latest Apache version installed
        yum:
          name: httpd
          state: latest
    ```

    In the added lines:

    * We started the tasks part with the keyword tasks:.
    * A task is named and the module for the task is referenced. Here it uses the yum module.
    * Parameters for the module are added:
      * name: to identify the package name
      * state: to define the wanted state of the package
  tabs:
  - title: editor
    type: service
    hostname: control
    path: /editor/
    port: 443
  difficulty: basic
  timelimit: 300
- slug: playbook-run-it
  id: 0fmn0jbj6gwd
  type: challenge
  title: Run it!
  teaser: See how it works!
  notes:
  - type: text
    contents: |-
      In the last challenge we created the playbook. Now it is time to launch it!

      We do this with the command `ansible-playbook` - one of the central commands of Ansible on the command line!
  - type: text
    contents: During the task you might be wondering how `ansible-playbook` actually
      knows where to find the `hosts` file - this is configured in the file `/home/rhel/.ansible.cfg`
      which was pre-created in this environment. If you have time have a look at it,
      it should be fairly self-explanatory.
  assignment: |-
    Ansible Playbooks are executed using the ansible-playbook command on the control node. We also have to tell Ansible where to find the inventory. Before you run a new Playbook it’s a good idea to check for syntax errors. On the control host, change into the `ansible-files` directory and execute the syntax check:

    ```
    cd ansible-files
    ansible-playbook --syntax-check apache.yml
    ```

    Now you should be ready to run your playbook:

    ```
    ansible-playbook apache.yml
    ```

    You might have to accept the SSH fingerprint during thist first connection to the host.

    The output should not report any errors but provide an overview of the tasks executed and a play recap summarizing what has been done. There is also a task called “Gathering Facts” listed there: this is an built-in task that runs automatically at the beginning of each play. It collects information about the managed nodes. Exercises later on will cover this in more detail.

    Connect to node1 via SSH to make sure Apache has been installed:

    ```
    ssh node1
    ```

    Use the command rpm -qi httpd to verify httpd is installed:

    ```
    rpm -qi httpd
    ```

    The output lists the name, version and other details about the package.

    Run the Playbook a second time, and compare the output: The output changed from “changed” to “ok”, and the color changed from yellow to green. Also the “PLAY RECAP” is different now. This make it easy to spot what Ansible actually did.
  tabs:
  - title: control
    type: terminal
    hostname: control
  difficulty: basic
  timelimit: 300
- slug: playbook-extend
  id: 5lslmmbz6rqg
  type: challenge
  title: Extend the playbook
  teaser: Automation is more than just one task - let's add more!
  notes:
  - type: text
    contents: By default, Ansible executes each task in order, one at a time, against
      all machines matched by the host pattern. Each task executes a module with specific
      arguments. When a task has executed on all target machines, Ansible moves on
      to the next task.
  - type: text
    contents: When you run a playbook, Ansible returns information about connections,
      the name lines of all your plays and tasks, whether each task has succeeded
      or failed on each machine, and whether each task has made a change on each machine.
      At the bottom of the playbook execution, Ansible provides a summary of the nodes
      that were targeted and how they performed. General failures and fatal “unreachable”
      communication attempts are kept separate in the counts.
  assignment: |-
    To add another task to the playbook, open the editor and open the file `apache.yml` again. Add the following task at the end of the file:

    ```
      - name: Apache enabled and running
        service:
          name: httpd
          enabled: true
          state: started
    ```

    Make sure that the task is indented the same way as the previous task!

    Switch to the control tab, and launch the playbook again in the corresponding directory `ansible-files`:

    ```
    ansible-playbook apache.yml
    ```

    Note how the first task just reports OK, while the second reports the status changed.
  tabs:
  - title: control
    type: terminal
    hostname: control
  - title: editor
    type: service
    hostname: control
    path: /editor/
    port: 443
  difficulty: basic
  timelimit: 300
- slug: playbook-files
  id: naw7sy7fsrtn
  type: challenge
  title: 'Extend the playbook more: copy files'
  teaser: 'Let''s do more with our automation: manage files!'
  notes:
  - type: text
    contents: Besides pure interactions on the target node there is also the possibility
      to copy data between the controlling instance and the managed nodes. The copy
      module can be used to transfer data.
  assignment: |-
    In the editor, create a file directory `files` underneath the directory `ansible-files`. Inside the `files` directory, create a html file called `web.html` with the following content

    ```
    <body>
    <h1>Apache is running fine, thanks to Ansible!</h1>
    </body>
    ```

    Now go back to the file `apache.yml` and add a task to copy this file to the managed node:

    ```
      - name: copy web.html
        copy:
          src: web.html
          dest: /var/www/html/index.html
    ```

    Note here that the source does not mention the directory `files`! The `files` directory is a default place that is searched for a given source automatically.

    On the control host, change to the directory `ansible-files` execute the playbook again:

    ```
    cd ansible-files
    ansible-playbook apache.yml
    ```

    As you see, the file is deployed.
  tabs:
  - title: control
    type: terminal
    hostname: control
  - title: editor
    type: service
    hostname: control
    path: /editor/
    port: 443
  difficulty: basic
  timelimit: 600
- slug: playbook-multi-node
  id: zwhyxxxky4tl
  type: challenge
  title: From 1 to many
  teaser: Real automation speaks to multiple hosts.
  notes:
  - type: text
    contents: |-
      The real power of Ansible is to apply the same set of tasks reliably to many hosts.

      So what about changing the apache.yml Playbook to run on node2 and node3?
  - type: text
    contents: To do that, the playbook will not target an individual  node in the
      future, but instead a group of nodes. Ansilbe automatically identifies all hosts
      in the group via the inventory.
  - type: text
    contents: As a best practice Ansible in real life applications playbooks are usually
      written adressing the group `all` - the limitation to certain nodes or groups
      is enforced at execution time via command line flags or via tools like Ansible
      controller.
  assignment: |
    In the editor, open the `apache.yml` file. Change the `hosts` line value from `node1` to `web`. That way during the next run of the playbook, instead of one host, Ansible targets an entire group.

    Run the playbook afterwards on the control host with:

    ```
    cd ansible-files
    ansible-playbook apache.yml
    ```

    Once the execution was successful, ssh to `node2` and verify that the service is indeed running:

    ```
    systemctl status httpd
    ```
  tabs:
  - title: control
    type: terminal
    hostname: control
  - title: editor
    type: service
    hostname: control
    path: /editor/
    port: 443
  difficulty: basic
  timelimit: 300
- slug: playbook-variables
  id: hmicmonxgffl
  type: challenge
  title: Adding variables to the mix
  teaser: Ansible supports variables to store values that can be used in Playbooks.  Let's
    do this.
  notes:
  - type: text
    contents: Ansible supports variables to store values that can be used in Playbooks.
      Variables can be defined in a variety of places and have a clear precedence.
      Ansible substitutes the variable with its value when a task is executed.
  - type: text
    contents: |-
      Variables are referenced in Ansible Playbooks by placing the variable name in double curly braces:

      ```
      Here comes a variable {{ variable1 }}
      ```
  - type: text
    contents: 'Variables and their values can be defined in various places: the inventory,
      additional files, on the command line, etc.'
  - type: text
    contents: |-
      The recommended practice to provide variables in the inventory is to define them in files located in two directories named `host_vars` and `group_vars`:

      * To define variables for a group “servers”, a YAML file named `group_vars/servers.yml` with the variable definitions is created.
      * To define variables specifically for a host node1, the file `host_vars/node1.yml` with the variable definitions is created.
  - type: text
    contents: Host variables take precedence over group variables (more about precedence
      can be found in the [docs](https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#variable-precedence-where-should-i-put-a-variable)).
  assignment: |-
    We want to save variables for certain hosts, and for the full group.

    In the editor, in the directory `ansible-files`, create two directories, `group_vars` and `host_vars`:

    We are going to set values for the variable `stage`. Create the file `~/ansible-files/group_vars/web.yml` with this content:

    ```
    ---
    stage: dev
    ```

    Create the file `~/ansible-files/host_vars/node1.yml` with this content:

    ```
    ---
    stage: prod
    ```

    Based on the stage, the playbook should copy a different file. Let's create two stage files. First the file `~/ansible-files/files/prod_web.html` with the content:

    ```
    <body>
    <h1>This is a production webserver, take care!</h1>
    </body>
    ```

    Second create the file `~/ansible-files/files/dev_web.html` with the content:

    ```
    <body>
    <h1>This is a development webserver, have fun!</h1>
    </body>
    ```

    Modify the copy task of the existing `apache.yml` playbook to this:

    ```
      - name: copy web.html
        copy:
          src: "{{ stage }}_web.html"
          dest: /var/www/html/index.html
    ```

    On the control host, run the playbook:

    ```
    cd ansible-files
    ansible-playbook apache.yml
    ```

    Test and compare the results:

    ```
    curl http://node1
    curl http://node2
    ```
  tabs:
  - title: control
    type: terminal
    hostname: control
  - title: editor
    type: service
    hostname: control
    path: /editor/
    port: 443
  difficulty: basic
  timelimit: 600
- slug: playbook-conditionals
  id: cst2di0ilb0g
  type: challenge
  title: Decide what to do - using conditionals
  teaser: How about we take routes in the automation - depending on conditions?
  notes:
  - type: text
    contents: In a playbook, you may want to execute different tasks, or have different
      goals, depending on the value of a fact (data about the remote system), a variable,
      or the result of a previous task. You may want the value of some variables to
      depend on the value of other variables. Or you may want to create additional
      groups of hosts based on whether the hosts match other criteria. You can do
      all of these things with conditionals.
  - type: text
    contents: 'The simplest conditional statement applies to a single task. Create
      the task, then add a when statement that applies a test: `when: ansible_selinux.status
      == "enabled"`'
  assignment: |-
    Imagine we are extending our setup: the web servers will get an MTA to be able to send status mails, and we add a backend database.

    To do that, open the `hosts` file in the `ansible-files` directory in your editor. Change the file to add another entry:

    ```
    [web]
    node1
    node2

    [database]
    node3
    ```

    Next, we will write a playbook installing the services depending on what group the node is in. In the directory `ansible-files`, create the file `extended_services.yml`. First, we add the task to install the MTA Postfix on all node of the group `web`:

    ```
    ---
    - name: Install extended services
      hosts: all
      become: true
      tasks:
        - name: Install MTA in web group
          yum:
            name: postfix
            state: latest
          when: inventory_hostname in groups["web"]
    ```

    Next, add a task installing the database on the node of the group database:

    ```
        - name: Install database in corresponding group
          yum:
            name: postgresql
            state: latest
          when: inventory_hostname in groups["database"]
    ```

    On the control host, execute the playbook:

    ```
    cd ansible-files
    ansible-playbook extended_services.yml
    ```
  tabs:
  - title: editor
    type: service
    hostname: control
    path: /editor/
    port: 443
  - title: control
    type: terminal
    hostname: control
  difficulty: basic
  timelimit: 600
- slug: playbook-loops
  id: guonbe0x8pd5
  type: challenge
  title: Using Loops
  teaser: When one step is just not enough
  notes:
  - type: text
    contents: Loops enable us to repeat the same task over and over again. For example,
      lets say you want to create multiple users. By using an Ansible loop, you can
      do that in a single task.
  - type: text
    contents: |-
      Loops can also iterate over more than just basic lists. For example, if you have a list of users with their coresponding group, loop can iterate over them as well.

      Find out more about loops in the [Ansible Loops documentation](https://docs.ansible.com/ansible/latest/user_guide/playbooks_loops.html).
  assignment: |-
    To show the loops feature we will generate three new users on `node2`. For that, open the editor and create the file `loop_users.yml`. We will use the user module to generate the user accounts.

    ```
    ---
    - name: Ensure users
      hosts: node2
      become: true

      tasks:
        - name: Ensure three users are present
          user:
            name: "{{ item }}"
            state: present
          loop:
             - dev_user
             - qa_user
             - prod_user
    ```

    On the control host, run the playbook:

    ```
    cd ansible-files
    ansible-playbook loop_users.yml
    ```

    Understand the playbook and the output:

    * The names are not provided to the user module directly. Instead, there is only a variable called `{{ item }}` for the parameter name.
    * The loop keyword lists the actual user names. Those replace the `{{ item }}` during the actual execution of the playbook.
    * During execution the task is only listed once, but there are three changes listed underneath it.
  tabs:
  - title: control
    type: terminal
    hostname: control
  - title: editor
    type: service
    hostname: control
    path: /editor/
    port: 443
  difficulty: basic
  timelimit: 600
- slug: playbook-templates
  id: rocjowp1psxk
  type: challenge
  title: Templates
  teaser: Templates give the power to create multiple host specific configuration
    from the same file.
  notes:
  - type: text
    contents: Ansible uses [Jinja2](http://jinja.pocoo.org/) templating to modify
      files before they are distributed to managed hosts. Jinja2 is one of the most
      used template engines for Python.
  - type: text
    contents: When a template for a file has been created, it can be deployed to the
      managed hosts using the template module, which supports the transfer of a local
      file from the control node to the managed hosts.
  - type: text
    contents: A typical ending for a file to indicate that it is a template file is
      `.j2`. Though this is strictly speaking not necessary, it is established practice.
  assignment: |-
    First, in the editor, create the directory `templates` to hold template resources underneath `~/ansible-files/`.

    In there, create the file `motd-facts.j2`:

    ```
    Welcome to {{ ansible_hostname }}.
    {{ ansible_distribution }} {{ ansible_distribution_version}}
    deployed on {{ ansible_architecture }} architecture.
    ```

    The template file contains the basic text that will later be copied over. It also contains variables which will be replaced on the target machines individually.

    Next we need a playbook to use this template. In the `~/ansible-files/` directory create the Playbook `motd-facts.yml`:

    ```
    ---
    - name: Fill motd file with host data
      hosts: node2
      become: true
      tasks:
        - template:
            src: motd-facts.j2
            dest: /etc/motd
            owner: root
            group: root
            mode: 0644
    ```

    Execute it on the control host:

    ```
    cd ansible-files
    ansible-playbook motd-facts.yml
    ```

    Login to node2 via SSH and check the message of the day content.
  tabs:
  - title: control
    type: terminal
    hostname: control
  - title: editor
    type: service
    hostname: control
    path: /editor/
    port: 443
  difficulty: basic
  timelimit: 600
checksum: "8166201613970544015"
