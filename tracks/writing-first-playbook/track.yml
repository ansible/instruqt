slug: writing-first-playbook
id: z1eg1d9cwmzk
version: 0.0.1
type: track
title: Writing your first playbook
teaser: Learn about the basics of how to write an Ansible playbook to automate simple
  infrastructure tasks
description: |-
  Ansible is a simple yet powerful IT automation engine for application deployment, configuration management, and orchestration that you can learn quickly. This exercise covers using Ansible to build Apache web servers on Red Hat Enterprise Linux.

  ![Lab diagram](https://ansible.github.io/workshops/images/rhel_lab_diagram.png)

  This exercise covers the following Ansible fundamentals:

  * Understanding Ansible Module parameters
  * Understanding and using the following modules
    * yum module
    * service module
    * copy module
  * Understanding Idempotence and how Ansible Modules can be idempotent


  You can find more information about Ansible at [Ansible.com](https://www.ansible.com/)

  [**Try Ansible Automation Platform today!**](https://red.ht/try_ansible)
icon: ""
level: beginner
tags:
- ansible
- infrastructure
owner: redhat
developers:
- rwolters@redhat.com
private: true
published: false
challenges:
- slug: playbook-directory-structure
  id: hqds4s7kqqmy
  type: challenge
  title: Creating a Directory Structure and your Playbook
  teaser: Write the first playbook
  assignment: |
    In this challenge you create a playbook to set up an Apache web server in three steps:

    1. Install httpd package
    1. Enable/start httpd service
    1. Copy over an web.html file to each web host

    This Playbook makes sure the package containing the Apache web server is installed on node1.

    There is a best practice on the preferred directory structures for playbooks. We strongly encourage you to read and understand these practices as you develop your Ansible ninja skills. That said, our playbook today is very basic and creating a complex structure will just confuse things.

    Instead, we are going to create a very simple directory structure for our playbook, and add just a couple of files to it.

    On your control host ansible, create a directory called ansible-files in your home directory and change directories into it:

    ```
    [student<X>@ansible ~]$ mkdir ansible-files
    [student<X>@ansible ~]$ cd ansible-files/
    ```

    Add a file called apache.yml with the following content. As discussed in the previous exercises, use vi/vim or, if you are new to editors on the command line, check out the editor intro again.

    ```
    ---
    - name: Apache server installed
      hosts: node1
      become: yes
    ```

    This shows one of Ansible’s strengths: The Playbook syntax is easy to read and understand. In this Playbook:

    * A name is given for the play via name:.
    * The host to run the playbook against is defined via hosts:.
    * We enable user privilege escalation with become:.

    Now that we’ve defined the play, let’s add a task to get something done. We will add a task in which yum will ensure that the Apache package is installed in the latest version. Modify the file so that it looks like the following listing:

    ```
    ---
    - name: Apache server installed
      hosts: node1
      become: yes
      tasks:
      - name: latest Apache version installed
        yum:
          name: httpd
          state: latest
    ```

    In the added lines:

    * We started the tasks part with the keyword tasks:.
    * A task is named and the module for the task is referenced. Here it uses the yum module.
    * Parameters for the module are added:
      * name: to identify the package name
      * state: to define the wanted state of the package
  notes:
  - type: text
    contents: |-
      Playbooks are files which describe the desired configurations or steps to implement on managed hosts. Playbooks can change lengthy, complex administrative tasks into easily repeatable routines with predictable and successful outcomes.

      A playbook can have multiple plays and a play can have one or multiple tasks. In a task a module is called, like the modules in the previous chapter. The goal of a play is to map a group of hosts. The goal of a task is to implement modules against those ho
  - type: text
    contents: |-
      Playbooks are text files written in YAML format and therefore need:

      * to start with three dashes (---)
      * proper indentation using spaces and not tabs!

      There are some important concepts:

      * hosts: the managed hosts to perform the tasks on
      * tasks: the operations to be performed by invoking Ansible modules and passing them the necessary options.
      * become: privilege escalation in Playbooks, same as using -b in the ad hoc command.
  - type: text
    contents: Good Playbooks are idempotent, so if a Playbook is run once to put the
      hosts in the correct state, it should be safe to run it a second time and it
      should make no further changes to the hosts.
  tabs:
  - title: node1
    type: terminal
    hostname: controller
  difficulty: basic
  timelimit: 500
- slug: playbook-run-it
  id: 0fmn0jbj6gwd
  type: challenge
  title: Run it!
  teaser: See how it works!
  assignment: |-
    Ansible Playbooks are executed using the ansible-playbook command on the control node. Before you run a new Playbook it’s a good idea to check for syntax errors:

    ```
    [student<X>@ansible ansible-files]$ ansible-playbook --syntax-check apache.yml
    ```

    Now you should be ready to run your playbook:

    ```
    [student<X>@ansible ansible-files]$ ansible-playbook apache.yml
    ```

    The output should not report any errors but provide an overview of the tasks executed and a play recap summarizing what has been done. There is also a task called “Gathering Facts” listed there: this is an built-in task that runs automatically at the beginning of each play. It collects information about the managed nodes. Exercises later on will cover this in more detail.

    Connect to node1 via SSH to make sure Apache has been installed:
    ```
    [student<X>@ansible ansible-files]$ ssh node1
    Last login: Wed May 15 14:03:45 2019 from 44.55.66.77
    ```

    Use the command rpm -qi httpd to verify httpd is installed:

    ```
    [student<X>@node1 ~]$ rpm -qi httpd
    Name        : httpd
    Version     : 2.4.6
    [...]
    ```

    Log out of node1 with the command exit so that you are back on the control host, and verify the installed package with an Ansible ad hoc command!

    ```
    [student<X>@ansible ansible-files]$ ansible node1 -m command -a 'rpm -qi httpd'
    ```

    Run the Playbook a second time, and compare the output: The output changed from “changed” to “ok”, and the color changed from yellow to green. Also the “PLAY RECAP” is different now. This make it easy to spot what Ansible actually did.
  notes:
  - type: text
    contents: |-
      In the last challenge we created the playbook. Now it is time to launch it!

      We do this with the command `ansible-playbook` - one of the central commands of Ansible on the command line!
  tabs:
  - title: node1
    type: terminal
    hostname: node1
  difficulty: basic
  timelimit: 600
checksum: "17415332178011109502"
