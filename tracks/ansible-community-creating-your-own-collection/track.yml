slug: ansible-community-creating-your-own-collection
id: vhmkq5wul4ps
type: track
title: '1. Ansible Community: Creating your own collection'
description: |-
  ## Overview

  This exercise will help you understand how to create your own content collection. This exercise will cover

  * Installing `ansible-core`
  * Creating Collection skeleton using `ansible-galaxy` command
  * Creating an example Collection
  * Using Collection in a Playbook
icon: https://www.ansible.com/hubfs/2016_Images/Assets/Ansible-Mark-Large-RGB-Pool.png?hsLang=en-us
level: beginner
tags:
- ansible-community
owner: redhat
developers:
- ompragash.viswanathan@gmail.com
private: false
published: true
challenges:
- slug: installing-ansible-core
  id: ypdexj7rmig0
  type: challenge
  title: Installing ansible-core
  teaser: How to install ansible-core
  assignment: |+
    Ansible Core v.10 is the first release of Ansible that fully supports Collections and it contains a minimal amount of Core supported modules and plugins.

    To start with, install `ansible-core` package, which includes `ansible-playbook` and `ansible-galaxy` binaries.

    ```
    pip3 install ansible-core --user
    ```

    Confirm that the ansible-core package is installed successfully.

    ```
    ansible --version
    ```

    ~~~
    ansible [core 2.11.0rc2]
      config file = None
      configured module search path = ['/root/.ansible/plugins/modules', '/usr/share/ansible/plugins/modules']
      ansible python module location = /rusr/share/lib64/python3.6/site-packages/ansible
      ansible collection location = /root/.ansible/collections:/usr/share/ansible/collections
      executable location = /home/ansible/developing_colelction/bin/ansible
      python version = 3.6.12 (default, Sep 15 2020, 12:49:50) [GCC 4.8.5 20150623 (Red Hat 4.8.5-37)]
      jinja version = 2.11.3
      libyaml = True
    ~~~

    You can verify ansible-core version from the first line of the above output.

    Additionally you can run `ansible-doc -l` to see the list of all built-in modules that are part of the core package.


  tabs:
  - title: Terminal
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 300
- slug: create-collection-skeleton
  id: dejqxa1ypkty
  type: challenge
  title: Creating Collection Skeleton Using ansible-galaxy Command
  teaser: Creating collection skeleton using ansible-galaxy command
  assignment: "The collection is a standardized way to organize and package Ansible content (roles, modules, module utilities, plugins, documentation).\n\nCollection Directory Structure:\n\n```\n    collection/\n    ├── docs/\n    ├── galaxy.yml\n    ├── meta/\n    │   └── runtime.yml\n    ├── plugins/\n    │   ├── modules/\n    │   ├── inventory/\n    │   └── .../\n    ├── README.md\n    ├── roles/\n    │   ├── role1/\n    │   └── .../\n    ├── playbooks/\n    └── tests/\n```\n\nA collection must have a galaxy.yml file that contains the necessary information to build a collection artifact. See Collection [Galaxy metadata structure](https://docs.ansible.com/ansible/latest/dev_guide/collections_galaxy_meta.html#collections-galaxy-meta) for details.\n\nNot all the directories are required unless you have specific content that belongs in one of them.\n\nThe default collection path is `~/.ansible/collections` followed by `/usr/share/ansible/collections`. \n\nNow, for this exercise create a directory path for collection use under the user home directory.\n\n```\nmkdir -p ~/collections/ansible_collections && cd ~/collections/ansible_collections\n```\n\nLet Ansible know the newly created path to search for collections content by exporting it to `ANSIBLE_COLLECTIONS_PATH` environment variable:\n\n```\nexport ANSIBLE_COLLECTIONS_PATH=~/collections/ansible_collections\n```\n\nUse the `ansible-galaxy` command to create a collection skeleton:\n\n```\nansible-galaxy collection init community.clock\n```\n\nHere, `community` is the namespace name and `clock` is the collection name.\n\nSee [Developing collections](https://docs.ansible.com/ansible/latest/dev_guide/developing_collections.html) to develop a collection and [Galaxy namespaces](https://galaxy.ansible.com/docs/contributing/namespaces.html#galaxy-namespaces) on the Galaxy docsite for namespace requirements.\n\nRun `tree` command to see the directory structure of newly created `community.clock` collection.\n\n```\ntree\n\n.\n└── community\n    └── clock\n        ├── docs\n        ├── galaxy.yml\n        ├── plugins\n        │   └── README.md\n        ├── README.md\n        └── roles\n```"
  tabs:
  - title: Terminal
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 500
- slug: creating-example-collection
  id: nxbgmaltwzta
  type: challenge
  title: Creating An Example Collection
  teaser: Creating an example collection
  assignment: |
    For example purpose, we’ll create a collection named `clock` that consists of Ansible `timezone` module.

    Note: Currently `timezone` module is part of the `community.general` collection but for simplicity purposes, we’ll be using it here.

    ```
    cd ~/collections/ansible_collections/community/clock/plugins
    ```

    You can refer the `README.md` file to know the list of the directories that can be created under plugins directory.

    As we will be copying a module file, we first need to create a directory with name `modules` under `plugins` directory:

    ```
    mkdir modules && cd modules
    ```

    Download Ansible `timezone` module python file:

    ```
    curl -O https://raw.githubusercontent.com/ansible/ansible/stable-2.9/lib/ansible/modules/system/timezone.py
    ```

    ~~~
    ls -l

    -rw-rw-r--. 1 root root 14096 Apr 12 15:47 timezone.py
    ~~~

    Likewise you can place your own modules under `plugins/modules` directory and other plugins lookups, filters, and so on in their respecting directory by creating them.

    See [Developing collections](https://docs.ansible.com/ansible/latest/dev_guide/developing_collections.html) to develop a collection.
  tabs:
  - title: Terminal
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 500
- slug: modify-galaxy-yml-file-with-collection-metadata
  id: kkknxsugvmi5
  type: challenge
  title: Modify galaxy.yml With Collection Metadata
  teaser: Edit galaxy.yml file with Collection metadata
  assignment: "A collection must have a galaxy.yml file that contains the necessary information to build a collection artifact. \n\nThe required keys in the galaxy.yml file are namespace, name, version, readme and authors. On initializing a collection using `ansible-galaxy` command it automatically populates namespace and collection name and you can modify the values accordingly as per your need.\n\nNow, modify `authors` and `description` keys in galaxy.yml file as part of this challenge.\n\n```\ncd ~/collections/ansible_collections/community/clock/\n```\n\n```\nvim galaxy.yml\n```\n\nModify the values with the below information:\n\n```\n…\nauthors:\n- Your Name <yourname@domain.com>\n\n…\n…\ndescription: This collection is used to configure timezone setting.\n```\n\nSee Collection [Galaxy metadata structure](https://docs.ansible.com/ansible/latest/dev_guide/collections_galaxy_meta.html#collections-galaxy-meta) for details."
  tabs:
  - title: Terminal
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 500
- slug: using-collection-in-a-playbook
  id: y4f2tt8i3yiq
  type: challenge
  title: Using Collection in a Playbook
  teaser: How to use collection in a playbook
  assignment: |-
    To call a module from inside a collection in playbook, you can directly use the `FQCN` (Fully Qualified Collection Name) which is a recommended way or you can use `collections` playbook keyword and then call the modules with short names.

    Create a playbook `configure_timezone.yml`

    ```
    vim ~/configure_timezone.yml
    ```

    Copy paste the below content:

    Note: Turn on `paste` mode in vim by typing `:set paste`, press `i` and then paste the below text to avoid indendation errors.

    ```
    ---
    - name: Change Timezone to Europe/Paris
      hosts: localhost
      become: true
      connection: local
      tasks:
        - name: Change TZ
          community.clock.timezone:
            name: Europe/Paris

    - name: Change Timezone to Europe/Paris
      hosts: localhost
      connection: local
      collections:
        - community.clock
      tasks:
        - name: Change TZ
          timezone:
            name: Europe/Paris
    ```

    The above playbook consists of two plays. The first play uses FQCN to call a module and the second uses collections keyword.

    Now execute the playbook.

    ```
    ansible-playbook configure_timezone.yml
    ```

    ```
    PLAY RECAP **************************************************************************************************************************
    localhost                  : ok=4    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
    ```

    The above output confirms that the playbook ran successfully.

    Also, you can verify the system timezone settings by executing `timedatectl` command:

    ```
    timedatectl status

          Local time: Wed 2021-04-14 14:25:21 CEST
      Universal time: Wed 2021-04-14 12:25:21 UTC
            RTC time: Wed 2021-04-14 14:25:20
           Time zone: Europe/Paris (CEST, +0200)
         NTP enabled: yes
    NTP synchronized: yes
     RTC in local TZ: yes
          DST active: yes
     Last DST change: DST began at
                      Sun 2021-03-28 01:59:59 CET
                      Sun 2021-03-28 03:00:00 CEST
     Next DST change: DST ends (the clock jumps one hour backwards) at
                      Sun 2021-10-31 02:59:59 CEST
                      Sun 2021-10-31 02:00:00 CET
    ```

    See [Using collections in a Playbook](https://docs.ansible.com/ansible/latest/user_guide/collections_using.html#using-collections-in-a-playbook) for more details.
  tabs:
  - title: Terminal
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 500
checksum: "16898328556741615246"
