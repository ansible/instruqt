slug: ansible-community-developing-ansible-module
id: doehzy3sdobe
type: track
title: '2. Ansible Community: Developing Ansible Module'
description: |-
  Ansible module is a reusable, standalone script that runs either locally or remotely and it can be used by the Ansible API, or by the `ansible` or `ansible-playbook` executable binaries.

  A module provides a defined interface, accepts arguments, and returns information to Ansible by printing a JSON string to stdout before exiting.

  This course explains how to develop an Ansible module at a basic level and also the requirements to develop the same.

  ## What you'll do

  * Preparing the developer environment
  * Change directory to the module path
  * Module Standard Format
  * Module Documentation
  * Module Examples
  * Module returns for use by other modules
  * Python Imports and Module Code
  * Check the final Module code
  * Verify and Test the Module code
  * Using the module in Ansible Playbook

  ## Prerequisite

  - Working Knowledge on Python
  - Before you start writing a new module kindly have a look at [Should you develop a module?](https://docs.ansible.com/ansible/latest/dev_guide/developing_modules.html#module-dev-should-you) section from [Ansible Developer Guide](https://docs.ansible.com/ansible/latest/dev_guide/index.html).
icon: https://www.ansible.com/hubfs/2016_Images/Assets/Ansible-Mark-Large-RGB-Pool.png?hsLang=en-us
level: beginner
tags:
- ""
owner: redhat
developers:
- ompragash.viswanathan@gmail.com
private: false
published: true
challenges:
- slug: preparing-dev-env
  id: 6awqlwsxro2r
  type: challenge
  title: Preparing the developer environment
  teaser: '#'
  assignment: |
    To develop an Ansible module you first need a development environment that has all the required packages installed in it.

    Clone the source of Ansible Repository from GitHub:

    ```
    git clone https://github.com/ansible/ansible.git
    ```

    Change directory to the locally cloned Ansible repo:

    ```
    cd ansible
    ```

    Create python virtual environment:

    ```
    python3 -m venv ansible-venv
    ```

    Activate the virtual environment and then install required packages that are listed in the requirements.txt file:

    ```
    . ./ansible-venv/bin/activate
    ```

    ```
    pip3 install --upgrade pip
    ```

    ```
    pip3 install -r requirements.txt
    ```

    Ansible developers has created an environment script which is bash script that allows you to quickly checkout ansible source and switch to that environment.

    Now, run the environment setup script:

    ```
    . ./hacking/env-setup
    ```

    `Note:` Whenever you’re ready to develop Ansible content you need to activate the virtual environment and then execute the environment setup script from the root of the Ansible repo.
    `. ./ansible-venv/bin/activate && . ./hacking/env-setup`

    Run the` ansible --version` command to verify the developer environment is created successfully.

    The output will look similar to the following:

    ~~~
    ansible [core 2.12.0.dev0]  (devel 148d4f6248) last updated 2021/05/27 23:01:53 (GMT +550)
      config file = None
      configured module search path = ['/Users/ompragash/.ansible/plugins/modules', '/usr/share/ansible/plugins/modules']
      ansible python module location = /Users/ompragash/Git/ansible/lib/ansible
      ansible collection location = /Users/ompragash/.ansible/collections:/usr/share/ansible/collections
      executable location = /Users/ompragash/Git/ansible/bin/ansible
      python version = 3.9.5 (v3.9.5:0a7dcbdb13, May  3 2021, 13:17:02) [Clang 6.0 (clang-600.0.57)]
      jinja version = 3.0.1
      libyaml = True
    ~~~

    From the first line, we can confirm that we are on the latest `devel` branch of the Ansible source.
  tabs:
  - title: Shell
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 400
- slug: cd-to-module-path
  id: 14ya8noij2u9
  type: challenge
  title: Change directory to the module path
  assignment: |
    To develop a module, navigate to the correct module path `plugins/modules` inside your collection directory.

    In this course, we’ll develop a basic `my_test` module that'll be a part of `example_ns.example_collection` collection.

    Activate the virtual environment and then execute the environment setup script from the root of the Ansible repo.

    ```
    . ~/ansible/ansible-venv/bin/activate && . ~/ansible/hacking/env-setup
    ```

    Create a collection using `ansible-galaxy` command:

    ```
    mkdir ~/ansible_collections/ && cd ~/ansible_collections/
    ```

    ```
    ansible-galaxy collection init example_ns.example_collection
    ```

    Create module path for example_ns.example_collection collection:

    ```
    mkdir -p example_ns/example_collection/plugins/modules
    ```

    Change directory to example_ns.example_collection collection module path:

    ```
    cd example_ns/example_collection/plugins/modules
    ```

    Create my_test.py module file:
    ```
    touch my_test.py
    ```
  tabs:
  - title: Shell
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 400
- slug: module-standard-format
  id: 5nskdvyqbomy
  type: challenge
  title: Module Standard Format
  teaser: '#'
  assignment: |-
    Let’s begin with developing the Ansible module.

    If you want to contribute your module to most Ansible collections, you must write your module in Python and follow the standard format described in this [link](https://docs.ansible.com/ansible/devel/dev_guide/developing_modules_documenting.html#module-format-and-documentation).

    Start by adding `#!/usr/bin/env python` to the my_test.py module file. This “shebang” allows `ansible_python_interpreter` to work.

    ```
    cd ~/ansible_collections/example_ns/example_collection/plugins/modules
    ```

    ```
    vim my_test.py
    ```

    Follow the shebang immediately with `# -*- coding: utf-8 -*-` to clarify that the file is UTF-8 encoded.

    Now, add a copyright line with the original copyright holder and a license declaration.

    Note: There are other types of license's available but for now we are using GNU GPL.

    ~~~
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-

    # Copyright: (c) 2018, Your Name <your.name@example.org>
    # GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
    ~~~

    Module file `my_test.py` should look like the above.
  tabs:
  - title: Shell
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 400
- slug: module-documentation
  id: uodr1y62zrxw
  type: challenge
  title: Module Documentation
  teaser: '#'
  assignment: |
    Ansible’s online module documentation is generated from the `DOCUMENTATION` blocks in each module’s source code. The `DOCUMENTATION` block must be valid YAML. It comes immediately after the shebang, UTF-8 coding, copyright and license details.

    Now, paste the below code into my_test.py module file.

    ```
    vim ~/ansible_collections/example_ns/example_collection/plugins/modules/my_test.py
    ```

    Note: Turn on `paste` mode in vim by typing `:set paste`, press `i` and then paste the below text to avoid indendation errors.

    ~~~
    DOCUMENTATION = r'''
    ---
    module: my_test
    short_description: This is my test module
    # If this is part of a collection, you need to use semantic versioning,
    # i.e. the version is of the form "2.5.0" and not "2.4".
    version_added: "1.0.0"
    description: This is my longer description explaining my test module.
    notes: This is a list which contains additional information that cannot be clubbed into any other parameter.
    options:
        name:
            description: This is the message to send to the test module.
            required: true
            type: str
        new:
            description:
                - Control to demo if the result of this module is changed or not.
                - Parameter description can be a list as well.
            required: false
            type: bool
    # Specify this value according to your collection
    # in format of namespace.collection.doc_fragment_name
    extends_documentation_fragment:
        - my_namespace.my_collection.my_doc_fragment_name
    author:
        - Your Name (@yourGitHubHandle)
    '''
    ~~~

    Save and exit `Vim` editor by typing `:wq`.

    From the above code, the `short_description` section contains the purpose of the module in one line and it’ll be displayed when the module is called using `ansible-doc -l` command.

    You can add the detailed description under the `description` section.

    If your module accepts arguments, then each one should be documented under the `options` section of the DOCUMENTATION block.

    To know in depth about the documentation block and its field, refer to the documentation [here](https://docs.ansible.com/ansible/latest/dev_guide/developing_modules_documenting.html#documentation-block)
  tabs:
  - title: Shell
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 400
- slug: module-examples
  id: igxyntqt0u6j
  type: challenge
  title: Module Examples
  teaser: '#'
  assignment: |
    After the DOCUMENTATION block comes the EXAMPLE block. This block contains examples of how the module works and how to use them inside the playbook. EXAMPLE block is written in multi-line plain-text YAML format.

    Open `my_test.py` and copy the below code after DOCUMENTATION block:

    ```
    vim ~/ansible_collections/example_ns/example_collection/plugins/modules/my_test.py
    ```

    Note: Turn on `paste` mode in vim by typing `:set paste`, press `i` and then paste the below text to avoid indendation errors.

    ~~~
    EXAMPLES = r'''
    # Pass in a message
    - name: Test with a message
      my_namespace.my_collection.my_test:
        name: hello world

    # pass in a message and have changed true
    - name: Test with a message and changed output
      my_namespace.my_collection.my_test:
        name: hello world
        new: true

    # fail the module
    - name: Test failure of the module
      my_namespace.my_collection.my_test:
        name: fail me
    '''
    ~~~

    Save and exit `Vim` editor by typing `:wq`.

    If your module supports check mode or diff mode then you can specify them in the example block.

    For more details on how to write EXAMPLE block in module file can be found [here](https://docs.ansible.com/ansible/latest/dev_guide/developing_modules_documenting.html#examples-block).
  tabs:
  - title: Shell
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 300
- slug: module-returns
  id: lcmw6k7zwhf7
  type: challenge
  title: Module returns for use by other modules
  teaser: '#'
  assignment: |
    RETURN block comes after the DOCUMENTATION and EXAMPLE block. This block contains the information about the module returns for use by other modules.

    Copy the below code into `my_test.py` file after the EXAMPLE block:

    ```
    vim ~/ansible_collections/example_ns/example_collection/plugins/modules/my_test.py
    ```

    Note: Turn on `paste` mode in vim by typing `:set paste`, press `i` and then paste the below text to avoid indendation errors.

    ~~~
    RETURN = r'''
    # These are examples of possible return values, and in general should use other names for return values.
    original_message:
        description: The original name param that was passed in.
        type: str
        returned: always
        sample: 'hello world'
    message:
        description: The output message that the test module generates.
        type: str
        returned: always
        sample: 'goodbye'
    '''
    ~~~

    Save and exit `Vim` editor by typing `:wq`.

    If your module doesn’t return anything (apart from the standard returns), this section of your module should read: RETURN = r''' # ''' Otherwise, for each value returned, provide the fields that are mentioned in the doc [here](https://docs.ansible.com/ansible/latest/dev_guide/developing_modules_documenting.html#return-block).
  tabs:
  - title: Shell
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 300
- slug: module-code-python-imports
  id: xr3x78axvxh3
  type: challenge
  title: Module Code and Python Imports
  teaser: '#'
  assignment: |
    So far we added the shebang, UTF-8 coding, copyright line, license, and the sections for DOCUMENTATION, EXAMPLES, and RETURN to the my_test.py module file. After all that, you can add the python imports.

    Python imports should be defined in this format `from ansible.module_utils.basic import AnsibleModule` for every module that is written for Ansible.

    Copy the below module code in my_test.py file after the RETURN block:

    ```
    vim ~/ansible_collections/example_ns/example_collection/plugins/modules/my_test.py
    ```

    Note: Turn on `paste` mode in vim by typing `:set paste`, press `i` and then paste the below text to avoid indendation errors.

    ```python
    from ansible.module_utils.basic import AnsibleModule

    def run_module():

        module_args = dict(
            name=dict(type='str', required=True),
            new=dict(type='bool', required=False, default=False)
        )

        result = dict(
            changed=False,
            original_message='',
            message=''
        )

        module = AnsibleModule(
            argument_spec=module_args,
            supports_check_mode=True
        )

        if module.check_mode:
            module.exit_json(**result)

        result['original_message'] = module.params['name']
        result['message'] = 'goodbye'

        if module.params['new']:
            result['changed'] = True

        if module.params['name'] == 'fail me':
            module.fail_json(msg='You requested this to fail', **result)

        module.exit_json(**result)


    def main():
        run_module()


    if __name__ == '__main__':
        main()
    ```

    Save and exit `Vim` editor by typing `:wq`.

    To understand each and every line of the above module code, read the comments in the python code from the example [here](https://github.com/ansible/ansible/blob/devel/examples/scripts/my_test.py).
  tabs:
  - title: Shell
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 400
- slug: final-module-code
  id: eovazg2zjprl
  type: challenge
  title: Check the final Module code
  teaser: '#'
  assignment: |
    If you have successfully followed the above steps, then the final my_test.py should look like the below:

    ```
    vim ~/ansible_collections/example_ns/example_collection/plugins/modules/my_test.py
    ```

    ~~~python
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-

    # Copyright: (c) 2018, Your Name <your.name@example.org>
    # GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

    DOCUMENTATION = r'''
    ---
    module: my_test
    short_description: This is my test module
    # If this is part of a collection, you need to use semantic versioning,
    # i.e. the version is of the form "2.5.0" and not "2.4".
    version_added: "1.0.0"
    description: This is my longer description explaining my test module.
    notes: This is a list which contains additional information that cannot be clubbed into any other parameter.
    options:
        name:
            description: This is the message to send to the test module.
            required: true
            type: str
        new:
            description:
                - Control to demo if the result of this module is changed or not.
                - Parameter description can be a list as well.
            required: false
            type: bool
    # Specify this value according to your collection
    # in format of namespace.collection.doc_fragment_name
    extends_documentation_fragment:
        - my_namespace.my_collection.my_doc_fragment_name
    author:
        - Your Name (@yourGitHubHandle)
    '''

    EXAMPLES = r'''
    # Pass in a message
    - name: Test with a message
      my_namespace.my_collection.my_test:
        name: hello world

    # pass in a message and have changed true
    - name: Test with a message and changed output
      my_namespace.my_collection.my_test:
        name: hello world
        new: true

    # fail the module
    - name: Test failure of the module
      my_namespace.my_collection.my_test:
        name: fail me
    '''

    RETURN = r'''
    # These are examples of possible return values, and in general should use other names for return values.
    original_message:
        description: The original name param that was passed in.
        type: str
        returned: always
        sample: 'hello world'
    message:
        description: The output message that the test module generates.
        type: str
        returned: always
        sample: 'goodbye'
    '''

    from ansible.module_utils.basic import AnsibleModule

    def run_module():

        module_args = dict(
            name=dict(type='str', required=True),
            new=dict(type='bool', required=False, default=False)
        )

        result = dict(
            changed=False,
            original_message='',
            message=''
        )

        module = AnsibleModule(
            argument_spec=module_args,
            supports_check_mode=True
        )

        if module.check_mode:
            module.exit_json(**result)

        result['original_message'] = module.params['name']
        result['message'] = 'goodbye'

        if module.params['new']:
            result['changed'] = True

        if module.params['name'] == 'fail me':
            module.fail_json(msg='You requested this to fail', **result)

        module.exit_json(**result)


    def main():
        run_module()


    if __name__ == '__main__':
        main()
    ~~~
  tabs:
  - title: Shell
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 200
- slug: verify-and-test-module-code
  id: ln9zz5ffqw0d
  type: challenge
  title: Verify and Test the Module code
  teaser: '#'
  assignment: |
    The my_test.py module accepts two arguments and to test if the code accepts and parses the arguments we’ll create an argument file and pass it to the module.

    Create `args.json` under `tmp` directory and add the below content:

    ```
    vim /tmp/args.json
    ```

    Note: Turn on `paste` mode in vim by typing `:set paste`, press `i` and then paste the below text to avoid indendation errors.

    ~~~
    {
        "ANSIBLE_MODULE_ARGS": {
            "name": "hello",
            "new": true
        }
    }
    ~~~

    Note: Before executing the module code locally make sure to activate the Python virtual environment and then run the environment setup script from the root of the Ansible repo.

    ```
    . ~/ansible/ansible-venv/bin/activate && . ~/ansible/hacking/env-setup
    ```

    Test `my_test` module by running it locally using python:

    ```
    cd ~/ansible_collections/example_ns/example_collection/plugins/modules/
    ```

    ~~~
    python -m my_test /tmp/args.json
    ~~~

    The below output verifies that my_test module accepts and returns arguments:

    ~~~
    {"changed": true, "state": {"original_message": "hello", "new_message": "goodbye"}, "invocation": {"module_args": {"name": "hello", "new": true}}}
    ~~~

    Now, you’re all set to use the module with `ansible` & `ansible-playbook` binaries and can use the `my_test` sample module code to write your own module.
  tabs:
  - title: Shell
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 400
- slug: using-the-module-with-playbook
  id: jobgag60vz1t
  type: challenge
  title: Using the new module in Ansible
  teaser: '#'
  assignment: |-
    As the `my_test` module is ready, it can be used with `ansible` and `ansible-playbook` executable binaries.

    Include `~/ansible_collections` to collections path.

    ```
    export ANSIBLE_COLLECTIONS_PATH=~/ansible_collections
    ```

    Refer to the [Ansible documentation](https://docs.ansible.com/ansible/devel/reference_appendices/config.html#collections-paths) for details.

    Activate the virtual environment and then execute the environment setup script from the root of the Ansible repo.

    ```
    . ~/ansible/ansible-venv/bin/activate && . ~/ansible/hacking/env-setup
    ```

    Run Ansible Ad-hoc command and call the `example_ns.example_collection.my_test` module like below:

    ```
    ansible localhost -m example_ns.example_collection.my_test -a "name='hello' new=true"
    ```

    ```
    localhost | CHANGED => {
        "changed": true,
        "message": "goodbye",
        "original_message": "hello"
    }
    ```

    The above output confirms that the command ran successfully.

    To call a module from inside a collection in playbook, you can directly use the `FQCN` (Fully Qualified Collection Name) which is a recommended way or you can use `collections` playbook keyword and then call the modules with short names.

    See [Using collections in a Playbook](https://docs.ansible.com/ansible/latest/user_guide/collections_using.html#using-collections-in-a-playbook) for more details.

    ## Congratulations!

    You developed a basic Ansible module with understanding of the required Ansible format and documentation, a simple argument spec for declaring the module options.

    See the [programming tips](https://docs.ansible.com/ansible/latest/dev_guide/developing_modules_best_practices.html#developing-modules-best-practices) and [Python 3 compatibility](https://docs.ansible.com/ansible/latest/dev_guide/developing_python_3.html#developing-python-3) pages for pointers on writing clean and concise module code.
  tabs:
  - title: Shell
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 400
checksum: "15443851702139682174"
