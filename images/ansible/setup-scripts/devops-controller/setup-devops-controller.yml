---
##
# https://play.instruqt.com/redhat/tracks/devops-controller/
#
# Tags:
# setup-env - Setup all lifecycle scripts
# auth-token - create controller auth-token
# <hostname>-config - Lifecycle setup script for host
# <challenge-slug>-check - check challenge 
# <challenge-slug>-solve - solve challenge 
# <challenge-slug>-setup - setup challenge
##

# - name: Run config for all hosts
#   hosts: ciservers
#   gather_facts: false
#   become: true
#   tags:
#     - gitea-config
#     - jenkins-config
#   tasks:
#     - name: Install collections
#       ansible.builtin.command: "/usr/bin/ansible-galaxy collection install --verbose {{ item }}"
#       loop:
#         - awx.awx
#         - community.general

#Gitea config
- name: Configure Gitea host
  hosts: gitea
  gather_facts: false
  become: true
  tags:
    - gitea-config
  
  tasks:
    # - name: Install Gitea packages
    #   community.general.apk:
    #     name: subversion, tar
    #     state: present
        
    # - name: Create setup-scripts directory
    #   ansible.builtin.file:
    #     path: /tmp/setup-scripts/devops-controller
    #     state: directory
        
    # - name: Download lab content to controller tmp directory
    #   ansible.builtin.subversion:
    #     repo: "{{ download_url }}"
    #     dest: /tmp/setup-scripts/devops-controller
    #     export: true
    #     force: true
    - name: Install collections
      ansible.builtin.command: "/usr/bin/ansible-galaxy collection install --verbose {{ item }}"
      loop:
        - awx.awx
        - community.general

    - name: Create repo users
      ansible.builtin.command: "{{ item }}"
      become_user: git
      register: __output
      failed_when: __output.rc not in [ 0, 1 ]
      changed_when: '"user already exists" not in __output.stdout'
      loop:
        - "/usr/local/bin/gitea admin user create --admin --username jenkins --password {{ student_password }} --must-change-password=false --email jenkins@localhost"
        - "/usr/local/bin/gitea admin user create --admin --username {{ student_user }} --password {{ student_password }} --must-change-password=false --email {{ student_user }}@localhost"

    - name: Create repo
      ansible.builtin.uri:
        url: http://gitea:3000/api/v1/user/repos
        method: POST
        body_format: json
        body:
          name: acme_corp
          auto_init: false
          private: false
        force_basic_auth: true
        url_password: "{{ student_password }}"
        url_username: "{{ student_user }}"
        status_code: [ 201, 409 ]

    - name: Create repo webhook
      ansible.builtin.uri:
        url: "http://gitea:3000/api/v1/repos/{{ student_user }}/acme_corp/hooks"
        method: POST
        body_format: json
        body:
          type: gitea
          config:
            content_type: json
            url: http://jenkins:8080/gitea-webhook/post
          active: true
          events:
            - push
        force_basic_auth: true
        url_password: "{{ student_password }}"
        url_username: "{{ student_user }}"
        status_code: [ 201, 409 ]

    - name: Remove repo dir if it exists
      ansible.builtin.file:
        path: "/root/acme_corp"
        state: absent

    - name: Create repo dir
      ansible.builtin.file:
        path: "/root/acme_corp"
        state: directory
        mode: 0755

    - name: Configure git to use main repo by default
      community.general.git_config:
        name: init.defaultBranch
        scope: global
        value: main
      tags:
        - git

    - name: Initialise track repo
      ansible.builtin.command:
        cmd: /usr/bin/git init
        chdir: "/root/acme_corp"
        creates: "/acme_corp/.git" 

    - name: Configure git to store credentials
      community.general.git_config:
        name: credential.helper
        scope: global
        value: store --file /tmp/git-creds

    - name: Configure repo dir as git safe dir
      community.general.git_config:
        name: safe.directory
        scope: global
        value: "/root/acme_corp"

    - name: Store repo credentials in git-creds file
      ansible.builtin.copy:
        dest: /tmp/git-creds
        mode: 0644
        content: "http://{{ student_user }}:{{ student_password }}@{{ 'gitea:3000' | urlencode }}"

    - name: Configure git username
      community.general.git_config:
        name: user.name
        scope: global
        value: "{{ ansible_user }}"

    - name: Configure git email address
      community.general.git_config:
        name: user.email
        scope: global
        value: "{{ ansible_user }}@local"

    - name: Extract initial repo files
      ansible.builtin.unarchive:
        src: /tmp/setup-scripts/devops-controller/files/acme_repo.tar.gz
        dest: "/root/acme_corp"
        creates: /root/acme_corp/app
        remote_src: true

    - name: Add remote origin to repo
      ansible.builtin.command:
        cmd: "{{ item }}"
        chdir: "/root/acme_corp"   
      register: __output
      changed_when: __output.rc == 0
      loop:
        - "git remote add origin http://gitea:3000/{{ student_user }}/acme_corp.git"
        - "git checkout -b main"
        - "git add ."
        - "git commit -m'Initial commit'"
        - "git push -u origin main --force"

# Jenkins config
- name: Jenkins config for devops-controller
  hosts: jenkins
  gather_facts: false
  tags:
    - jenkins-config

  tasks:
    # - name: Create setup-scripts directory
    #   ansible.builtin.file:
    #     path: /tmp/setup-scripts/devops-controller
    #     state: directory

    # - name: Download lab content to tmp directory
    #   ansible.builtin.subversion:
    #     repo: "{{ download_url }}"
    #     dest: /tmp/setup-scripts/devops-controller
    #     export: true
    #     force: true
    # - name: Install collections
    #   ansible.builtin.command: "/usr/bin/ansible-galaxy collection install --verbose {{ item }}"
    #   loop:
    #     - awx.awx
    #     - community.general
        
    - name: Install jenkins-cli
      ansible.builtin.get_url:
        url: http://jenkins:8080/jnlpJars/jenkins-cli.jar
        dest: /var/jenkins_home/jenkins-cli.jar
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0644"

    - name: Create Jenkins jobs
      ansible.builtin.shell:
        chdir: /var/jenkins_home
        cmd: "/opt/java/openjdk/bin/java -jar /var/jenkins_home/jenkins-cli.jar -s http://jenkins:8080 -auth {{ jenkins_user }}:{{ student_password }} create-job {{ item.name }} < {{ item.template_file }}"
      loop: "{{ jenkins_jobs }}"
      register: __output
      changed_when: __output.rc != 4
      failed_when: __output.rc not in [ 0, 4 ]
    
# Controller setup
- name: Controller config for devops-controller
  hosts: controller
  gather_facts: true
    
  tasks:
  # Setup student git repo
    - name: Remove repo dir if it exists
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/acme_corp"
        state: absent
      tags:
        - controller-config

    - name: Configure git to use main repo by default
      community.general.git_config:
        name: init.defaultBranch
        scope: global
        value: main
      become: true
      become_user: "{{ ansible_user }}"
      tags:
        - controller-config

    - name: Configure git to store credentials
      community.general.git_config:
        name: credential.helper
        scope: global
        value: store --file /tmp/git-creds
      become: true
      become_user: "{{ ansible_user }}"
      tags:
        - controller-config

    - name: Configure repo dir as git safe dir
      community.general.git_config:
        name: safe.directory
        scope: global
        value: "/home/{{ ansible_user }}/acme_corp"
      become: true
      become_user: "{{ ansible_user }}"
      tags:
        - controller-config

    - name: Store repo credentials in git-creds file
      ansible.builtin.copy:
        dest: /tmp/git-creds
        content: "http://{{ student_user }}:{{ student_password }}@{{ 'gitea:3000' | urlencode }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644
      tags:
        - controller-config

    - name: Configure git username
      community.general.git_config:
        name: user.name
        scope: global
        value: "{{ ansible_user }}"
      become: true
      become_user: "{{ ansible_user }}"
      tags:
        - controller-config
      
    - name: Configure git email address
      community.general.git_config:
        name: user.email
        scope: global
        value: "{{ ansible_user }}@local"
      become: true
      become_user: "{{ ansible_user }}"
      tags:
        - controller-config

    - name: Pull repo from SCM
      ansible.builtin.git:
        repo: "{{ git_repo }}"
        dest: "/home/{{ ansible_user }}/acme_corp"
      become: true
      become_user: "{{ ansible_user }}"
      tags:
        - controller-config

    - name: Ensure tower/controller is online and working
      uri:
        url: https://localhost/api/v2/ping/
        method: GET
        user: "{{ admin_username }}"
        password: "{{ admin_password }}"
        validate_certs: false
        force_basic_auth: true
      register: controller_online
      until: controller_online is success
      delay: 3
      retries: 5
      tags:
        - controller-config

   # Create auth login token
    - name: get auth token and restart automation-controller if it fails
      block:
        - name: Refresh facts
          setup:

        - name: Create oauth token
          awx.awx.token:
            description: 'Instruqt lab'
            scope: "write"
            state: present
            controller_config_file: "{{ playbook_dir }}/../controller.cfg"
          register: _auth_token
          until: _auth_token is not failed
          delay: 3
          retries: 5
      rescue:
        - name: In rescue block for auth token
          debug:
            msg: "failed to get auth token. Restarting automation controller service"

        - name: restart the controller service
          ansible.builtin.service:
            name: automation-controller
            state: restarted

        - name: Ensure tower/controller is online and working
          uri:
            url: https://localhost/api/v2/ping/
            method: GET
            user: "{{ admin_username }}"
            password: "{{ admin_password }}"
            validate_certs: false
            force_basic_auth: true
          register: controller_online
          until: controller_online is success
          delay: 3
          retries: 5

        - name: Retry getting auth token
          awx.awx.token:
            description: 'Instruqt lab'
            scope: "write"
            state: present
            controller_config_file: "{{ playbook_dir }}/../controller.cfg"  
            validate_certs: false
          register: _auth_token
          until: _auth_token is not failed
          delay: 3
          retries: 5
      always:
        - name: Create fact.d dir
          ansible.builtin.file:
            path: "{{ custom_facts_dir }}"
            state: directory
            recurse: yes
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: 0644
          become: true

        - name: Create _auth_token custom fact
          ansible.builtin.copy:
            content: "{{ _auth_token.ansible_facts }}"
            dest: "{{ custom_facts_dir }}/{{ custom_facts_file }}"
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: 0644
          become: true
      check_mode: false
      when: ansible_local.custom_facts.controller_token is undefined
      tags:
        - auth-token

    - name: refresh facts
      setup:
      tags:
        - always

    - name: create auth token fact
      ansible.builtin.set_fact:
        auth_token: "{{ ansible_local.custom_facts.controller_token }}"
        cacheable: true
      check_mode: false
      when: ansible_local.custom_facts is defined
      tags:
        - always
