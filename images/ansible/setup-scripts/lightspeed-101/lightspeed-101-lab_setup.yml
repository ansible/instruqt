---
##
# https://play.instruqt.com/redhat/tracks/lightspeed101/
##

- name: Instruqt SSH key
  hosts: all
  gather_facts: false
  become: true

  vars_files:
    - track_vars.yml
    - vault_track_vars.yml

  tasks:
  # For some reason, the authorized_key file disappears after instruqt setup sequence on rhel user
    - name: Add instruqt_lab ssh key to authorized keys on nodes
      ansible.posix.authorized_key:
        user: "{{ ansible_user }}"
        state: present
        key: "{{ lookup('file', '~/.ssh/instruqt_lab.pub') }}"
        comment: "Instruqt lab key"
      become_user: "{{ ansible_user }}"
      retries: 5
      delay: 1
      tags:
        - setup-env

- name: Check, solve and setup lightspeed-101
  hosts: automationcontroller
  gather_facts: false
  become: true

  vars_files:
    - track_vars.yml
    - vault_track_vars.yml

  vars:
    controller_login: &controller_login
      controller_username: "{{ controller_username }}"
      controller_password: "{{ controller_password }}"
      controller_host: "{{ controller_hostname }}"
      validate_certs: "{{ controller_validate_certs }}"
    track_slug: lightspeed-101

  module_defaults:
    group/aws:
      region: us-east-1
      access_key: "{{ lookup('ansible.builtin.env', 'AWS_ACCESS_KEY_ID') }}"
      secret_key: "{{ lookup('ansible.builtin.env', 'AWS_SECRET_ACCESS_KEY') }}"
    group/azure:
      location: eastus
    group/azure.azcollection.all:
      client_id: "{{ lookup('ansible.builtin.env', 'INSTRUQT_AZURE_SUBSCRIPTION_AZUREADMIN_SPN_ID') }}"
      secret: "{{ lookup('ansible.builtin.env', 'INSTRUQT_AZURE_SUBSCRIPTION_AZUREADMIN_SPN_PASSWORD') }}"
      subscription_id: "{{ lookup('ansible.builtin.env', 'INSTRUQT_AZURE_SUBSCRIPTION_AZUREADMIN_SUBSCRIPTION_ID') }}"
      tenant: "{{ lookup('ansible.builtin.env', 'INSTRUQT_AZURE_SUBSCRIPTION_AZUREADMIN_TENANT_ID') }}"
      # username: "{{ lookup('env','INSTRUQT_AZURE_SUBSCRIPTION_AZUREADMIN_USERNAME') }}"
      # password: "{{ lookup('env','INSTRUQT_AZURE_SUBSCRIPTION_AZUREADMIN_PASSWORD') }}"

  tasks:
    # Have to update objects with $_SANDBOX_ID in FQDN.
    - name: Setup initial environment
      tags:
        - setup-env
      block:
    #  Needs Instruqt Azure account name to be "azureadmin"
        - name: Setup Azure environment vars
          ansible.builtin.blockinfile:
            path: /etc/profile
            mode: "0644"
            owner: root
            group: root
            block: |
              export AZURE_CLIENT_ID="${INSTRUQT_AZURE_SUBSCRIPTION_AZUREADMIN_SPN_ID}"
              export AZURE_TENANT="${INSTRUQT_AZURE_SUBSCRIPTION_AZUREADMIN_TENANT_ID}"
              export AZURE_SUBSCRIPTION_ID="${INSTRUQT_AZURE_SUBSCRIPTION_AZUREADMIN_SUBSCRIPTION_ID}"
              export AZURE_SECRET="${INSTRUQT_AZURE_SUBSCRIPTION_AZUREADMIN_SPN_PASSWORD}"
              export AZURE_PASSWORD="${INSTRUQT_AZURE_SUBSCRIPTION_AZUREADMIN_PASSWORD}"
              export AZURE_AD_USER="${INSTRUQT_AZURE_SUBSCRIPTION_AZUREADMIN_USERNAME}"

        - name: Wait for controller availability
          ansible.builtin.uri:
            url: https://localhost/api/v2/ping/
            method: GET
            user: "{{ controller_login.controller_username }}"
            password: "{{ controller_login.controller_password }}"
            validate_certs: "{{ controller_login.validate_certs }}"
          register: __controller_check
          until: 
            - __controller_check.json is defined 
            - __controller_check.json.instances[0].capacity > 0
            - __controller_check.json.instance_groups[0].capacity > 0
          retries: 20
          delay: 1

        #  This is so ansible-navigator searches FQDN instead of resolving to localhost
        # - name: Add Instruqt search domain to resolve.conf
        #   ansible.builtin.lineinfile:
        #     path: /etc/resolv.conf
        #     state: present
        #     line: "search {{ lookup('ansible.builtin.env', '_SANDBOX_ID') }}.svc.cluster.local."
        #     mode: '644'

        # - name: Remove default controller 127.0.0.1 entry - {{ track_slug }}-controller
        #   ansible.builtin.lineinfile:
        #     state: absent
        #     regexp: '^127\.0\.0\.1\s*{{ track_slug }}-controller$'
        #     path: /etc/hosts
        #     mode: '644'

        # - name: Update lab inventory with Instruqt FQDN
        #   awx.awx.inventory:
        #     name: "{{ item.name }}"
        #     organization: "{{ item.organization }}"
        #     description: "{{ item.description }}"
        #     variables: "{{ item.variables }}"
        #     <<: *controller_login
        #   loop: "{{ controller_inventories }}"
        #   when: controller_inventories is defined

        # # Temp
        # - name: Pull execution environment images - awx
        #   become_user: "awx"
        #   containers.podman.podman_image:
        #     name: "{{ item.image }}"
        #   loop: "{{ controller_execution_environments }}"
        #   register: __podman_pull_supported_awx
        #   until: __podman_pull_supported_awx is not failed
        #   retries: 180
        #   delay: 1

        # # Temp
        # - name: Pull latest EE
        #   awx.awx.execution_environment:
        #     state: present
        #     pull: always
        #     name: "{{ lab.navigator_execution_environment.name }}"
        #     image: "{{ lab.navigator_execution_environment.image }}"
        #     description: "{{ lab.navigator_execution_environment.name }}"
        #     <<: *controller_login
        # # Temp
        - name: Delete lightspeed demo repo - {{ gitea_repo_name }}
          ansible.builtin.uri:
            force_basic_auth: true
            url_username: "{{ student_username }}"
            url_password: "{{ student_password }}"
            validate_certs: false
            body_format: json
            url: "{{ gitea_app_url }}/api/v1/repos/{{ student_username }}/{{ gitea_repo_name }}"
            method: DELETE
            body:
              owner: "{{ student_username }}"
              repo: "{{ gitea_repo_name }}"
            status_code: [204]
          become: true
          become_user: "{{ student_username }}"
          register: __delete_repo
          changed_when: __delete_repo['status'] == 204
          failed_when: false

        # # Temp
        - name: Clone lightspeed demo repo - {{ gitea_repo_name }}
          ansible.builtin.uri:
            force_basic_auth: true
            url_username: "{{ student_username }}"
            url_password: "{{ student_password }}"
            validate_certs: false
            body_format: json
            url: "{{ gitea_app_url }}/api/v1/repos/migrate"
            method: POST
            body:
              clone_addr: "{{ gitea_clone_address }}"
              repo_name: "{{ gitea_repo_name }}"
              private: false
            status_code: [201, 409]
          become: true
          become_user: "{{ student_username }}"
          register: __migrate_repo
          changed_when: __migrate_repo['status'] == 201

        # #  Temp
        - name: Remove current repo dir
          ansible.builtin.file:
            state: absent
            path: "~{{ student_username }}/acme_corp"
          become_user: "{{ student_username }}"

        # # temp
        - name: Clone repository to {{ student_username }} # noqa latest[git]
          environment:
            GIT_SSL_NO_VERIFY: true
          ansible.builtin.git:
            repo: "{{ gitea_app_url }}/{{ student_username }}/{{ gitea_repo_name }}"
            dest: "~{{ student_username }}/acme_corp"
          become_user: "{{ student_username }}"

        # temp or rh1 branch
        - name: Temp - checkout devel
          ansible.builtin.command:
            # TODO fix to correct branch
            cmd: git checkout devel
            chdir: "~{{ student_username }}/{{ gitea_repo_name }}"
          become_user: "{{ student_username }}"
        # temp
        - name: Copy VS Code workspace settings to repo
          ansible.builtin.copy:
            src: "/opt/setup-scripts/{{ track_slug }}/files/.vscode"
            dest: "~{{ student_username }}/{{ gitea_repo_name }}/"
            remote_src: true
            owner: "{{ student_username }}"
            group: "{{ student_username }}"
            directory_mode: "755"
            mode: "644"
        # # temp
        - name: Fix directory permissions - {{ gitea_repo_name }}
          ansible.builtin.file:
            path: "~{{ student_username }}/{{ gitea_repo_name }}/.vscode"
            state: directory
            owner: "{{ student_username }}"
            group: "{{ student_username }}"
            mode: "755"

    # - name: Setup initial playbook files for challenges
    #   ansible.builtin.copy:
    #     src: "{{ playbook_dir }}/files/initial_playbooks/{{ item }}"
    #     dest: "~{{ student_username }}/{{ gitea_repo_name }}/{{ item }}"
    #     owner: "{{ student_username }}"
    #     group: "{{ student_username }}"
    #     remote_src: true
    #     mode: "644"
    #   register: __initial_playbook
    #   retries: 20
    #   delay: 1
    #   until: not __initial_playbook.failed
    #   loop: "{{ lookup('ansible.builtin.vars', content_list)['playbooks'] }}"
    #   tags:
    #     - setup-monitoring-playbook
    #     # - setup-keywords-playbook
    #     - setup-external-content-playbook
    #     - setup-generate-tasks-playbook
    #     - setup-workflow-playbook
  
    - name: Solve Overwrite demo Playbooks with solution playbooks - {{ gitea_repo_name }}
      ansible.builtin.copy:
        src: "{{ item.source_playbook }}"
        dest: "{{ item.dest_playbook }}"
        owner: "{{ student_username }}"
        group: "{{ student_username }}"
        remote_src: "{{ item.remote_src | default(omit) }}"
        mode: "644"
      loop: "{{ lookup('ansible.builtin.vars', content_list)['playbooks'] }}"
      tags:
        - setup-workflow-playbooks
        - solve-workflow-playbooks
        - solve-database-playbooks
        - solve-monitoring-playbooks
        - solve-apache-playbooks
        - solve-aws-playbooks
        - solve-azure-playbooks
        - setup-playground-playbooks

    - name: Setup and Solve - Git add Playbooks to repo
      ansible.builtin.command:
        cmd: "git add {{ item.dest_playbook }}"
        chdir: "~{{ student_username }}/{{ gitea_repo_name }}"
      become_user: "{{ student_username }}"
      register: __add_output
      changed_when: __add_output.rc == 0
      loop: "{{ lookup('ansible.builtin.vars', content_list)['playbooks']  }}"
      tags:
        - setup-playground-playbooks
        - setup-workflow-playbooks
        - solve-monitoring-playbooks
        - solve-apache-playbooks
        - solve-database-playbooks
        - solve-aws-playbooks
        - solve-azure-playbooks
        - solve-workflow-playbooks

    - name: Setup - Push challenge setup commit to repo
      ansible.builtin.command:
        cmd: "{{ item }}"
        chdir: "~{{ student_username }}/{{ gitea_repo_name }}"
      become_user: "{{ student_username }}"
      register: __output
      failed_when: false # TODO loop with matching changed_when and failed_when text.
      loop:
        - "git commit -m'Challenge setup commit.'"
        - "git push -u origin devel --force" # Temp
        # - "git push -u origin main --force"
      tags:
        - setup-playground-playbooks
        - setup-workflow-playbooks
        - solve-workflow-playbooks
        - solve-database-playbooks
        - solve-monitoring-playbooks
        - solve-apache-playbooks
        - solve-aws-playbooks
        - solve-azure-playbooks

    - name: Sync Project - {{ lab.project.name }}
      awx.awx.project_update:
        name: "{{ lab.project.name }}"
        wait: true
        timeout: 60
        <<: *controller_login
      tags:
        setup-env

    - name: Update controller credentials - {{ content_list }}
      awx.awx.credential:
        name: "{{ item.name }}"
        description: "{{ item.description }}"
        organization: "{{ item.organization }}"
        state: "{{ item.state }}"
        inputs: "{{ item.inputs }}"
        credential_type: "{{ item.credential_type }}"
        <<: *controller_login
      # no_log: true
      delegate_to: localhost
      loop: "{{ controller_credentials[content_list] }}"
      when: 
        - controller_credentials is defined
        - content_list is defined
      retries: 10
      delay: 1
      tags:
        # Have to add playground-credentials because of content_list var
        - setup-playground-credentials
        - setup-aws-credentials
        - setup-azure-credentials

    - name: Setup - create job templates - {{ content_list }}
      awx.awx.job_template:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
        become_enabled: "{{ item.become_enabled | default(omit)}}"
        project: "{{ item.project }}"
        credentials: "{{ item.credentials }}"
        organization: "{{ item.organization }}"
        inventory: "{{ item.inventory }}"
        playbook: "{{ item.playbook }}"
        survey_spec: "{{ item.survey_spec | default(omit) }}"
        ask_inventory_on_launch: "{{ item.ask_inventory_on_launch | default(false) }}"
        ask_limit_on_launch: "{{ item.ask_limit_on_launch | default(omit) }}"
        extra_vars: "{{ item.extra_vars | default(omit) }}"
        limit: "{{ item.limit | default(omit) }}"
        execution_environment: "{{ item.execution_environment }}"
        job_tags: "{{ item.job_tags | default(omit) }}"
        <<: *controller_login
      delegate_to: localhost
      register: __create_job_templates
      until: not __create_job_templates.failed
      retries: 20
      delay: 1
      loop: "{{ controller_templates[content_list] }}"
      when: 
        - controller_templates[content_list] is defined
      tags:
        - setup-monitoring-jt
        - setup-apache-jt
        - setup-database-jt
        - setup-workflow-jt
        - setup-aws-jt
        - setup-azure-jt
        - setup-playground-jt

    - name: Setup AWS resources
      delegate_to: localhost
      tags:
        - setup-aws-resources
      block:
        - name: Create keypair called lightspeed-keypair from instruqt_lab.pub key
          amazon.aws.ec2_key:
            name: lightspeed-keypair
            key_material: "{{ lookup('ansible.builtin.file', '~/.ssh/instruqt_lab.pub') }}"
            tags:
              function: lightspeed-demo

        - name: Create VPC named vpc-lightspeed
          amazon.aws.ec2_vpc_net:
            name: vpc-lightspeed
            cidr_block: 10.0.0.0/16
            tags:
              Name: vpc-lightspeed
              function: lightspeed-demo
            state: present
          register: ec2_vpc_net

        - name: Create vpc_id var
          ansible.builtin.set_fact:
            vpc_id: "{{ ec2_vpc_net.vpc.id }}"

        - name: Create security group named secgroup-lightspeed in vpc-lightspeed vpc
          amazon.aws.ec2_security_group:
            name: secgroup-lightspeed
            description: SSH access
            vpc_id: "{{ vpc_id }}"
            state: present
            rules:
              - proto: tcp
                ports:
                  - 22
                cidr_ip: 0.0.0.0/0
                rule_desc: allow all on ssh port
            tags:
              function: lightspeed-demo
          register: secgroup_lightspeed

        - name: Create subnet with 10.0.1.0/24 cidr called subnet-lightspeed
          amazon.aws.ec2_vpc_subnet:
            vpc_id: "{{ vpc_id }}"
            cidr: 10.0.1.0/24
            az: us-east-1a
            state: present
            tags:
              Name: subnet-lightspeed
          register: subnet_lightspeed

        - name: Create internet gateway
          amazon.aws.ec2_vpc_igw:
            vpc_id: "{{ vpc_id }}"
            tags:
              Name: gateway-lightspeed
            state: present
          register: igw

        - name: Create public route table
          amazon.aws.ec2_vpc_route_table:
            vpc_id: "{{ vpc_id }}"
            subnets:
              - "{{ subnet_lightspeed.subnet.id }}"
            routes:
              - dest: 0.0.0.0/0
                gateway_id: "{{ igw.gateway_id }}"

    - name: Setup Azure resources
      delegate_to: localhost
      tags:
        - setup-azure-resources
      block:
        - name: Create files folder
          ansible.builtin.file:
            path: "~{{ student_username }}/{{ gitea_repo_name }}/playbooks/cloud/azure/files"
            state: directory
            owner: "{{ student_username }}"
            group: "{{ student_username }}"
            mode: '0755'
          delegate_to: controller.acme.example.com

        - name: Copy Instruqt lab SSH keys
          ansible.builtin.copy:
            src: "~/.ssh/{{ item.name }}"
            dest: "~{{ student_username }}/{{ gitea_repo_name }}/playbooks/cloud/azure/files/azure_demo_ssh_key{{ item.name | splitext | last }}"
            owner: "{{ student_username }}"
            group: "{{ student_username }}"
            mode: "{{ item.mode }}"
          delegate_to: controller.acme.example.com
          loop:
            - name: instruqt_lab
              mode: '0600'
            - name: instruqt_lab.pub
              mode: '0644'

        - name: Create resource group called rg-lightspeed
          azure.azcollection.azure_rm_resourcegroup:
            name: rg-lightspeed
            location: eastus
          register: rg

        - name: Create virtual network called vnet-lightspeed
          azure.azcollection.azure_rm_virtualnetwork:
            resource_group: rg-lightspeed
            name: vnet-lightspeed
            address_prefixes: 10.0.0.0/16

        - name: Add subnet called subnet-lightspeed
          azure.azcollection.azure_rm_subnet:
            resource_group: rg-lightspeed
            name: subnet-lightspeed
            address_prefix: 10.0.1.0/24
            virtual_network: vnet-lightspeed

        - name: Create public IP address called ip-lightspeed
          azure.azcollection.azure_rm_publicipaddress:
            resource_group: rg-lightspeed
            allocation_method: Static
            name: ip-lightspeed
          register: ip_lightspeed

        - name: Create azure_public_ip var
          ansible.builtin.set_fact:
            azure_public_ip: "{{ ip_lightspeed.state.ip_address }}"

        - name: Create Network Security Group that allows SSH
          azure.azcollection.azure_rm_securitygroup:
            resource_group: rg-lightspeed
            name: secgroup-lightspeed
            rules:
              - name: SSH
                protocol: Tcp
                destination_port_range: 22
                access: Allow
                priority: 1001
                direction: Inbound

        - name: Create virtual network interface
          azure.azcollection.azure_rm_networkinterface:
            resource_group: rg-lightspeed
            name: nic-lightspeed
            virtual_network: vnet-lightspeed
            subnet: subnet-lightspeed
            public_ip_name: ip-lightspeed
            security_group: secgroup-lightspeed

    - name: Solve configure-tools VS Code settings
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/files/settings_workspace_solve.json"
        dest: "~{{ student_username }}/{{ gitea_repo_name }}/.vscode/settings.json"
        owner: "{{ student_username }}"
        group: "{{ student_username }}"
        remote_src: true
        mode: "0644"
      register: __settings_file
      tags:
        - solve-configure-tools

    - name: Check configure-tools present VS Code settings
      tags:
        - check-configure-tools
      block:
        - name: Check Lightspeed config present
          ansible.builtin.lineinfile:
            path: "~{{ student_username }}/{{ gitea_repo_name }}/.vscode/settings.json"
            # path: "~{{ student_username }}/.config/Code/User/settings.json"
            state: absent
            backrefs: true
            regex: "{{ item.regex }}"
            owner: "{{ student_username }}"
            group: "{{ student_username }}"
            mode: "0644"
          check_mode: "{{ check_mode | default(true) }}"
          register: __vscode_lightspeed
          loop: "{{ configure_tools['vscode_settings']['present'] }}"

        - name: Assert __vscode_lightspeed lines found
          ansible.builtin.assert:
            that: 
              - item.found > 0
            fail_msg: The VS Code .vscode/settings.json missing Lightspeed entries.
            success_msg: VS Code Lightspeed config entries present.
          loop: "{{ __vscode_lightspeed.results }}"

    - name: Solve run job templates
      delegate_to: localhost
      awx.awx.job_launch:
        name: "{{ item.name }}"
        wait: true
        <<: *controller_login
      loop: "{{ controller_templates[content_list] }}"
      when: 
        - controller_templates[content_list] is defined
      tags:
        - solve-database-jt
        - solve-monitoring-jt
        - solve-apache-jt
        - solve-aws-jt
        - solve-azure-jt

    - name: Check EC2 instance is provisioned and running
      delegate_to: localhost
      tags:
        - check-aws-instance
      block:
        - name: Gather EC2 instance info
          amazon.aws.ec2_instance_info:
            filters:
              "tag:Name": "instance-lightspeed-01"
              "tag:function": "demo-lightspeed"
              instance-state-name: ["running"]
          register: ec2_node_info

        - name: Assert that EC2 instance is provisioned and running
          ansible.builtin.assert:
            that:
              - ec2_node_info["instances"] | length > 0
            fail_msg: The EC2 instance is not provisioned and running.
            success_msg: The EC2 instance is provisioned and running.

    - name: Cleanup AWS instance
      delegate_to: localhost
      amazon.aws.ec2_instance:
        state: terminated
        filters:
          "tag:Name": "instance-lightspeed-01"
          "tag:function": "demo-lightspeed"
        wait: false
      tags:
        - cleanup-aws-instance

    - name: Check Azure VM is provisioned and running
      delegate_to: localhost
      azure_rm_virtualmachine_info:
        resource_group: rg-lightspeed
        name: vm-lightspeed
      register: __azure_vm_info
      tags:
        - check-azure-vm

    - name: Remove Azure VM instance
      delegate_to: localhost
      azure.azcollection.azure_rm_virtualmachine:
        state: absent
        name: vm-lightspeed
        resource_group: rg-lightspeed
      tags:
        - cleanup-azure-vm

    # - name: Check workflow exists and schema
    #   check_mode: "{{ check_mode | default(true) }}"
    #   connection: local
    #   block:
    #     - name: Workflow check workflow created
    #       awx.awx.workflow_job_template:
    #         name: "{{ item.name }}"
    #         inventory: "{{ item.inventory | default(omit) }}"
    #         extra_vars: "{{ item.extra_vars | default(omit) }}"
    #         ask_variables_on_launch: "{{ item.ask_variables_on_launch | default(false) }}"
    #         organization: "{{ item.organization }}"
    #         state: "{{ workflow_state | default('present')}}"
    #         <<: *controller_login
    #       register: __workflow_create
    #       loop: "{{ controller_workflows }}"
    #       when: (controller_workflows is defined)
    #       # tags:
    #         # - check-workflow-create-wjt
    #         # - setup-playground-wft

    #     - name: Check workflow - assert workflow exists
    #       ansible.builtin.assert:
    #         that: 
    #           - not __workflow_create.changed | bool
    #         fail_msg:  "{{ lab.workflow_name | quote }} workflow missing."
    #         success_msg: "{{ lab.workflow_name | quote }} workflow exists."
    #       tags:
    #         - check-workflow-create-wjt

    #     - name: Check workflow job template nodes - {{ lab.workflow_name }}
    #       awx.awx.workflow_job_template_node:
    #         identifier: "{{ item.identifier }}"
    #         organization: "{{ item.organization | default(omit) }}"
    #         unified_job_template: "{{ item.unified_job_template }}"
    #         workflow_job_template: "{{ item.workflow_job_template }}"
    #         <<: *controller_login
    #       register: __workflow_nodes_create
    #       loop: "{{ controller_workflow_nodes }}"
    #       when: (controller_workflow_nodes is defined)
    #       tags:
    #         - check-workflow-schema

    #     - name: Check workflow job template nodes schema - {{ lab.workflow_name }}
    #       awx.awx.workflow_job_template_node:
    #         identifier: "{{ item.identifier }}"
    #         organization: "{{ item.organization | default(omit) }}"
    #         unified_job_template: "{{ item.unified_job_template }}"
    #         workflow_job_template: "{{ item.workflow_job_template }}"
    #         success_nodes: "{{ item.success_nodes | default(omit) }}"
    #         always_nodes: "{{ item.always_nodes | default(omit) }}"
    #         failure_nodes: "{{ item.failure_nodes | default(omit) }}"
    #         <<: *controller_login
    #       register: __workflow_nodes_schema
    #       loop: "{{ controller_workflow_nodes }}"
    #       when: (controller_workflow_nodes is defined)
    #       tags:
    #         - check-workflow-schema

    #     - name: Check workflow - assert workflow config
    #       ansible.builtin.assert:
    #         that:  not __workflow_nodes_schema.changed | bool
    #         fail_msg:  "{{ lab.workflow_name | quote }} workflow config incorrect."
    #         success_msg: "{{ lab.workflow_name | quote }} workflow config correct."
    #       tags:
    #         - check-workflow-schema
      
    # - name: Workflow solve run workflow
    #   tags:
    #     - solve-workflow-run-jt
    #   block:
    #     - name: Create workflow with solve job template
    #       awx.awx.job_launch:
    #         name: "{{ item }}"
    #         wait: true
    #         <<: *controller_login
    #       loop: "{{ workflow.jt_names }}"
    #       register: __workflow_run

    #     - name: Workflow solve run workflow
    #       awx.awx.workflow_launch:
    #         name: "{{ lab.workflow_name }}"
    #         wait: true
    #         <<: *controller_login

- name: Setup, check, and solve on nodes
  hosts: nodes
  gather_facts: false
  become: true

  vars:
    track_slug: lightspeed-101

  vars_files:
    - track_vars.yml
    - vault_track_vars.yml

  tasks:
    - name: Create pgadmin container
      tags:
        - setup-database-container
      block:
        - name: Get host ansible_facts
          ansible.builtin.setup:

        - name: Run podman container using pgadmin_container var
          containers.podman.podman_container:
            name: "{{ pgadmin_container.name }}"
            image: "{{ pgadmin_container.image }}"
            state: stopped
            ports: "{{ pgadmin_container.ports }}"
            generate_systemd: "{{ pgadmin_container.generate_systemd }}"
            env: "{{ pgadmin_container.env }}"
            network: "{{ pgadmin_container.network }}"

        - name: Manage container service - {{ pgadmin_service_name }}
          ansible.builtin.systemd:
            name: "{{ pgadmin_service_name }}"
            state: "{{ container_service | default('stopped') }}"
            enabled: true
            daemon_reload: true

    - name: Check database - PGAdmin is running
      tags:
        - check-database-app
      block:
        - name: Get container info - "{{ pgadmin_container.name }}"
          containers.podman.podman_container_info:
            name:
              - "{{ pgadmin_container.name }}"
          register: __app_container_info

        - name: Check database - assert container is running
          ansible.builtin.assert:
            that: 
              - '"Error: inspecting object: no such container" not in __app_container_info.stderr'
              - __app_container_info.containers[0]["State"]["Running"]
            fail_msg: "Error inspecting container - {{ pgadmin_container.name }}."
            success_msg: "Successfully inspected container - {{ pgadmin_container.name }}."

    - name: Check monitoring - Cockpit is running
      tags:
        - check-monitoring-cockpit
      block:
        - name: Check and Solve monitoring - Cockpit app is running
          ansible.builtin.systemd:
            name: cockpit.socket
            state: started
          check_mode: "{{ check_mode | default(true) }}"
          register: __cockpit_service

        - name: Check monitoring - assert cockpit is running
          ansible.builtin.assert:
            that: 
              - __cockpit_service["status"]["ActiveState"] == "active"
            fail_msg: "Cockpit service stopped."
            success_msg: "Cockpit service running."

    - name: Check webserver - Apache is running
      tags:
        - check-apache-webserver
      block:
        - name: Check and Solve  - Apache app is running
          ansible.builtin.systemd:
            name: httpd
            state: started
          check_mode: "{{ check_mode | default(true) }}"
          register: __apache_service

        - name: Check webserver - assert apache is running
          ansible.builtin.assert:
            that: 
              - __apache_service["status"]["ActiveState"] == "active"
            fail_msg: "Apache service stopped."
            success_msg: "Apache service running."


    - name: Check database - Postgresql is running
      tags:
        - check-database-postgresql
      block:
        - name: Check and Solve keywords - Monitor app is running
          ansible.builtin.systemd:
            name: postgresql
            state: started
          check_mode: "{{ check_mode | default(true) }}"
          register: __postgresql_service

        - name: Check database - assert postgresql is running
          ansible.builtin.assert:
            that: 
              - __postgresql_service["status"]["ActiveState"] == "active"
            fail_msg: "Postgresql service stopped."
            success_msg: "Postgresql service running."
