# Configures mesh environment by reinstalling controller and using "{{ mesh_inventory_template }} file for configuration"
##
# Tags:
# create-instances - Create temporary GCP instances
# delete-instances - Delete temporary GCP instances
# controller-install - Controller installation
# controller-config - Setup controller objects for lab
# create-images - Create new GCP images
# delete-images - Deletes the current mesh GCP images
# code-server-install - Install code server
##
- name: Setup localhost for mesh instruqt lab
  hosts: localhost
  gather_facts: false

  vars:
    gcp_login: &gcp_login
      project: "{{ gcp_project }}"
      auth_kind: serviceaccount
      service_account_file: "{{ gcp_service_account_file }}"

  pre_tasks:
    - name: Include variable tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/60_mesh_check_vars.yml"

  tasks:
    - name: Install and upgrade collections - {{ inventory_hostname }}
      ansible.builtin.command: "ansible-galaxy collection install {{ __local_collection_install_item }} --upgrade"
      loop:
        - ansible.workshops
        - google.cloud
        - ansible.posix
        - community.crypto
        - containers.podman
        - redhat_cop.controller_configuration
        - awx.awx
      loop_control:
        loop_var: __local_collection_install_item
      register: __local_collection_install
      changed_when: '"is already installed, skipping" not in __local_collection_install.stdout'
      tags:
        - install-collections
        - controller-install

    - name: Remove existing gcloud instances
      when: (gcp_instances is defined) and (gcp_instances | length > 0)
      tags:
        - delete-instances
      block:
        - name: Remove gcloud instances
          google.cloud.gcp_compute_instance:
            name: "{{ __remove_instances_job_async_item.instance_name }}"
            state: absent
            zone: "{{ gcp_zone }}"
            <<: *gcp_login
          loop: "{{ gcp_instances }}"
          loop_control:
            loop_var: __remove_instances_job_async_item
            label: "{{ __remove_instances_job_async_item.instance_name }}"
          async: 1000
          poll: 0
          register: __remove_instances_job_async
          changed_when: not __remove_instances_job_async.changed

        - name: "Remove existing gcloud instances | Wait for finish the instance deletion"
          ansible.builtin.async_status:
            jid: "{{ __remove_instances_job_async_result_item.ansible_job_id }}"
          retries: 60
          delay: 1
          loop: "{{ __remove_instances_job_async.results }}"
          loop_control:
            loop_var: __remove_instances_job_async_result_item
          until: __remove_instances_job_async_result.finished
          register: __remove_instances_job_async_result
          when: __remove_instances_job_async_result_item.ansible_job_id is defined

    - name: Create gcloud instances
      when: (gcp_instances is defined) and (gcp_instances | length > 0)
      tags:
        - create-instances
      block:
        - name: Create new gcloud instances
          google.cloud.gcp_compute_instance:
            name: "{{ __create_instances_job_async_item.instance_name }}"
            machine_type: "{{ __create_instances_job_async_item.instance_machine_type }}"
            labels: "{{ __create_instances_job_async_item.instance_labels }}"
            state: present
            zone: "{{ gcp_zone }}"
            <<: *gcp_login
            network_interfaces:
              - access_configs:
                - name: External NAT # noqa yaml[indentation]
                  type: ONE_TO_ONE_NAT
            disks:
              - auto_delete: true
                boot: true
                device_name: "{{ __create_instances_job_async_item.instance_name }}"
                initialize_params:
                  source_image: "projects/{{ gcp_project }}/global/images/{{ __create_instances_job_async_item.instance_image }}"
                  disk_size_gb: 20
                  disk_type: pd-balanced
          loop: "{{ gcp_instances }}"
          loop_control:
            loop_var: __create_instances_job_async_item
            label: "{{ __create_instances_job_async_item.instance_name }}"
          async: 1000
          poll: 0
          register: __create_instances_job_async
          changed_when: not __create_instances_job_async.changed

        - name: "Create new gcloud instances | Wait for finish the instance create"
          ansible.builtin.async_status:
            jid: "{{ __create_instances_job_async_result_item.ansible_job_id }}"
          retries: 60
          delay: 1
          loop: "{{ __create_instances_job_async.results }}"
          loop_control:
            loop_var: __create_instances_job_async_result_item
          until: __create_instances_job_async_result.finished
          register: __create_instances_job_async_result
          when: __create_instances_job_async_result_item.ansible_job_id is defined
      rescue:
        - name: Rescue - remove gcloud instances
          google.cloud.gcp_compute_instance:
            name: "{{ __remove_instances_rescue_item.instance_name }}"
            state: absent
            zone: "{{ gcp_zone }}"
            <<: *gcp_login
          loop: "{{ gcp_instances }}"
          loop_control:
            loop_var: __remove_instances_rescue_item
        - name: Print error message
          ansible.builtin.fail:
            msg: |
              "Rescue - Unable to create gcloud instances.
              "{{ __create_instances_job_async_result }}"

    - name: Get gcp node instance info
      google.cloud.gcp_compute_instance_info: # noqa syntax-check
        filters:
          - labels.role = "{{ track_slug }}"
        zone: "{{ gcp_zone }}"
        <<: *gcp_login
      register: __mesh_node_instance_info
      tags:
        - create-instances

    - name: Remove previous known_hosts keys from localhost
      ansible.builtin.known_hosts:
        name: "{{ item.networkInterfaces[0].accessConfigs[0].natIP }}"
        state: absent
      loop: "{{ __mesh_node_instance_info.resources }}"
      when: (__mesh_node_instance_info.resources is defined) and (__mesh_node_instance_info.resources | length > 0)
      tags:
        - create-instances
        - ssh-key

    - name: Wait for gcloud instances to start
      when:
        - (__mesh_node_instance_info.resources is defined) and (__mesh_node_instance_info.resources | length > 0)
        - (gcp_instances is defined) and (gcp_instances | length > 0)
      tags:
        - create-instances
      block:
        - name: Wait for gcloud instances - SSH
          ansible.builtin.wait_for:
            host: "{{ __instances_ssh_async_item.networkInterfaces[0].accessConfigs[0].natIP }}"
            port: 22
            delay: 5
            timeout: 120
          loop: "{{ __mesh_node_instance_info.resources }}"
          loop_control:
            loop_var: __instances_ssh_async_item
          async: 1000
          poll: 0
          register: __instances_ssh_async
          changed_when: not __instances_ssh_async.changed

        - name: "Wait for gcloud instances - SSH | Wait for SSH"
          ansible.builtin.async_status:
            jid: "{{ __instances_ssh_async_result_item.ansible_job_id }}"
          retries: 35
          delay: 5
          loop: "{{ __instances_ssh_async.results }}"
          loop_control:
            loop_var: __instances_ssh_async_result_item
          until: __instances_ssh_async_result.finished
          register: __instances_ssh_async_result
          when: __instances_ssh_async_result_item.ansible_job_id is defined
      rescue:
        - name: Print error message
          ansible.builtin.fail:
            msg: |
              "Rescue - Unable to connect to GCloud instances SSH.
              "{{ __instances_ssh_async_result }}"
        - name: Rescue - remove gcloud instances
          google.cloud.gcp_compute_instance:
            name: "{{ __remove_instances_rescue_item.instance_name }}"
            state: absent
            zone: "{{ gcp_zone }}"
            <<: *gcp_login
          loop: "{{ gcp_instances }}"
          loop_control:
            loop_var: __remove_instances_rescue_item

    - name: Add gcp node hosts to inventory
      ansible.builtin.add_host:
        name: "{{ item.name }}"
        groups: "execnodes"
        ansible_host: "{{ item.networkInterfaces[0].accessConfigs[0].natIP }}"
      args: "{{ gcp_inventory_host_vars | default(omit) }}"
      loop: "{{ __mesh_node_instance_info.resources }}"
      when:
        - (item.labels["mesh-type"] == "hop") or (item.labels["mesh-type"] == "execution")
        - (__mesh_node_instance_info.resources is defined) and (__mesh_node_instance_info.resources | length > 0)
      tags:
        - create-instances

    - name: Add gcp controller hosts to inventory
      ansible.builtin.add_host:
        name: "{{ item.name }}"
        groups: "automationcontroller"
        ansible_host: "{{ item.networkInterfaces[0].accessConfigs[0].natIP }}"
      args: "{{ gcp_inventory_host_vars | default(omit) }}"
      loop: "{{ __mesh_node_instance_info.resources }}"
      when:
        - item.labels["mesh-type"] == "controller"
        - (__mesh_node_instance_info.resources is defined) and (__mesh_node_instance_info.resources | length > 0)
      tags:
        - create-instances

    - name: Create install SSH key
      when: (__mesh_node_instance_info.resources is defined) and (__mesh_node_instance_info.resources | length > 0)
      tags:
        - create-instances
        - controller-install
      block:
        - name: Create temp dir for ssh keys
          ansible.builtin.tempfile:
            state: directory
            prefix: instruqt_ssh_
          register: _ssh_tempdir

        - name: Generate temp OpenSSH key pair for nodes
          community.crypto.openssh_keypair:
            path: "{{ _ssh_tempdir.path }}/instruqt_lab"
            force: true

# Run configuration on all mesh instances
- name: Run config and setup on all instances
  hosts: all
  become: true
  gather_facts: true

  pre_tasks:
    - name: Include variable tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/60_mesh_check_vars.yml"

  tasks:
    - name: Add instruqt_lab ssh key to authorized keys - {{ ansible_user }}
      ansible.posix.authorized_key:
        user: "{{ ansible_user }}"
        state: present
        key: "{{ lookup('file', hostvars.localhost._ssh_tempdir.path + '/instruqt_lab.pub') }}"
        comment: "Instruqt lab key"
      tags:
        - ssh-key
        - controller-install

    - name: Add instruqt_lab ssh key to authorized keys - {{ ansible_user_id }}
      ansible.posix.authorized_key:
        user: "{{ ansible_user_id }}"
        state: present
        key: "{{ lookup('file', hostvars.localhost._ssh_tempdir.path + '/instruqt_lab.pub') }}"
        comment: "Instruqt lab key"
      tags:
        - ssh-key
        - controller-install

    - name: Enable RHUI repos for aap install
      ansible.builtin.command: >
        dnf config-manager --set-enabled rhui*
      register: __rhui_results
      changed_when: __rhui_results.rc == 0
      tags:
        - controller-install

# configure the controller instance
- name: Setup controller
  hosts: automationcontroller
  gather_facts: false
  become: true

  pre_tasks:
    - name: Include variable tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/60_mesh_check_vars.yml"

  tasks:
    - name: Include common controller tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/50_mesh_controller.yml"
      tags:
        - controller-install

    - name: Install code server
      ansible.builtin.import_role:
        name: ansible.workshops.code_server
      tags:
        - code-server-install
        - controller-install

# Run cleanup tasks on images
- name: Run config and setup on instances
  hosts: all
  become: true
  gather_facts: false

  pre_tasks:
    - name: Include vars file from extra_vars directory
      ansible.builtin.include_vars:
        file: "{{ mesh_extra_vars }}"
      when: (mesh_extra_vars is defined) and (mesh_extra_vars | length > 0)

  tasks:
    - name: Include common image cleanup tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/10_image_cleanup.yml"
      tags:
        - cleanup-instances

    - name: Remove known_hosts entries for root
      ansible.builtin.known_hosts:
        name: "{{ item.instance_name }}"
        state: absent
      loop: "{{ gcp_instances }}"
      tags:
        - cleanup-instances
        - ssh-key

    - name: Remove known_hosts entries for {{ ansible_user }}
      ansible.builtin.known_hosts:
        name: "{{ item.instance_name }}"
        state: absent
      become: false
      loop: "{{ gcp_instances }}"
      tags:
        - cleanup-instances
        - ssh-key

# create GCP images
- name: Create instruqt images
  hosts: localhost
  gather_facts: false

  pre_tasks:
    - name: Include vars file from extra_vars directory
      ansible.builtin.include_vars:
        file: "{{ mesh_extra_vars }}"
      when: (mesh_extra_vars is defined) and (mesh_extra_vars | length > 0)

  tasks:
    - name: Stop gcloud instances
      when: (gcp_instances is defined) and (gcp_instances | length > 0)
      tags:
        - create-images
        - stop-instances
      block:
        - name: Stop gcloud instances
          google.cloud.gcp_compute_instance:
            name: "{{ __instances_stop_async_item.instance_name }}"
            status: TERMINATED
            zone: "{{ gcp_zone }}"
            <<: *gcp_login
          loop: "{{ gcp_instances }}"
          loop_control:
            loop_var: __instances_stop_async_item
          async: 1000
          poll: 0
          register: __instances_stop_async
          changed_when: not __instances_stop_async.changed

        - name: "Async | Stop gcloud instances"
          ansible.builtin.async_status:
            jid: "{{ __instances_stop_async_result_item.ansible_job_id }}"
          retries: 60
          delay: 1
          loop: "{{ __instances_stop_async.results }}"
          loop_control:
            loop_var: __instances_stop_async_result_item
          until: __instances_stop_async_result.finished
          register: __instances_stop_async_result
          when: __instances_stop_async_result_item.ansible_job_id is defined

    - name: Remove current gcloud images
      when: (gcp_instances is defined) and (gcp_instances | length > 0)
      tags:
        - create-images
        - delete-images
      block:
        - name: Remove current gcloud images
          google.cloud.gcp_compute_image:
            name: "{{ __images_remove_async_item.instance_name }}-image"
            state: absent
            <<: *gcp_login
          loop: "{{ gcp_instances }}"
          loop_control:
            loop_var: __images_remove_async_item
          async: 1000
          poll: 0
          register: __images_remove_async
          changed_when: not __images_remove_async.changed

        - name: "Async | Remove current gcloud images"
          ansible.builtin.async_status:
            jid: "{{ __images_remove_async_result_item.ansible_job_id }}"
          retries: 35
          delay: 5
          loop: "{{ __images_remove_async.results }}"
          loop_control:
            loop_var: __images_remove_async_result_item
          until: __images_remove_async_result.finished
          register: __images_remove_async_result
          when: __images_remove_async_result_item.ansible_job_id is defined
      rescue:
        - name: Print error message
          ansible.builtin.fail:
            msg: |
              "Rescue - Unable to remove gcloud images."
              "{{ __images_remove_async_result }}"
            notify:
              - Remove temp gcloud instances

    - name: Create new Instruqt mesh images
      tags:
        - create-images
      block:
        - name: Create gcloud images
          google.cloud.gcp_compute_image:
            name: "{{ __images_create_async_item.instance_name }}-image"
            state: present
            source_disk:
              selfLink: "https://www.googleapis.com/compute/v1/projects/{{ gcp_project }}/zones/{{ gcp_zone }}/disks/{{ __images_create_async_item.instance_name }}" # noqa yaml[line-length]
            <<: *gcp_login
          loop: "{{ gcp_instances }}"
          loop_control:
            loop_var: __images_create_async_item
          async: 1000
          poll: 0
          register: __images_create_async
          changed_when: not __images_create_async.changed

        - name: "Async | Create new Instruqt gcloud images"
          ansible.builtin.async_status:
            jid: "{{ __images_create_async_result_item.ansible_job_id }}"
          retries: 40
          delay: 5
          loop: "{{ __images_create_async.results }}"
          loop_control:
            loop_var: __images_create_async_result_item
          until: __images_create_async_result.finished
          register: __images_create_async_result
          when: __images_create_async_result_item.ansible_job_id is defined
      rescue:
        - name: Print error message
          ansible.builtin.fail:
            msg: |
              "Rescue - Unable to remove gcloud images."
              "{{ __images_create_async_result }}"
            notify:
              - Remove temp gcloud instances

  handlers:
    - name: Remove temp gcloud instances
      when: (gcp_instances is defined) and (gcp_instances | length > 0)
      tags:
        - delete-instances
        - create-images
      block:
        - name: Remove temp gcloud instances
          google.cloud.gcp_compute_instance:
            name: "{{ __remove_instances_job_async_item.instance_name }}"
            state: absent
            zone: "{{ gcp_zone }}"
            <<: *gcp_login
          loop: "{{ gcp_instances }}"
          loop_control:
            loop_var: __remove_instances_job_async_item
            label: "{{ __remove_instances_job_async_item.instance_name }}"
          async: 1000
          poll: 0
          register: __remove_instances_job_async
          changed_when: not __remove_instances_job_async.changed

        - name: "Remove temp gcloud instances | Wait for finish the instance deletion"
          ansible.builtin.async_status:
            jid: "{{ __remove_instances_job_async_result_item.ansible_job_id }}"
          retries: 35
          delay: 5
          loop: "{{ __remove_instances_job_async.results }}"
          loop_control:
            loop_var: __remove_instances_job_async_result_item
          until: __remove_instances_job_async_result.finished
          register: __remove_instances_job_async_result
          when: __remove_instances_job_async_result_item.ansible_job_id is defined
