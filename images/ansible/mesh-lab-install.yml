# Configures mesh environment by reinstalling controller and using "{{ mesh_inventory_template }} file for configuration"
##
# Tags:
# create-instances - Create temporary GCP instancesation
# delete-instances - Delete temporary GCP instances
# controller-install - Controller installation
# controller-config - Setup controller objects for lab
# create-images - Create new GCP images
# delete-images - Deletes the current mesh GCP images
# code-server-install - Install code server
##
- name: Setup mesh instruqt lab
  hosts: localhost
  gather_facts: false

  pre_tasks:
    - name: Check variables are defined and not empty before building images
      ansible.builtin.fail:
        msg: "{{ item }} is undefined or empty. Please check your extra vars file"
      when: not lookup('vars', item) or lookup('vars', item) is undefined
      loop:
        - offline_token
        - redhat_username
        - redhat_password
        - registry_username
        - registry_password

  tasks:
    - name: Download and upgrade collections
      ansible.builtin.command: "ansible-galaxy collection install {{ item }} --upgrade"
      loop:
        - ansible.workshops
        - google.cloud
        - ansible.posix
        - community.crypto
        - awx.awx
      register: __collection_install
      changed_when: '"Starting collection install process" in __collection_install.stdout'
      tags:
        - controller-install
        - controller-config
        - install-collections

    - name: Download AAP
      ansible.builtin.include_role:
        name: ansible.workshops.aap_download
      tags:
        - install-controller
        - controller-config

    - name: Remove existing gcloud instances
      google.cloud.gcp_compute_instance:
        name: "{{ item.instance_name }}"
        zone: "{{ gcp_zone }}"
        project: "{{ gcp_project }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_service_account_file }}"
        state: absent
      loop: "{{ gcp_instances }}"
      register: __delete_instances
      tags:
        - delete-instances

    - name: Create new gcloud instances
      google.cloud.gcp_compute_instance:
        name: "{{ item.instance_name }}"
        machine_type: "{{ item.instance_machine_type }}"
        labels: "{{ item.instance_labels }}"
        network_interfaces:
          - access_configs:
            - name: External NAT # noqa yaml[indentation]
              type: ONE_TO_ONE_NAT
        disks:
          - auto_delete: true
            boot: true
            device_name: "{{ item.instance_name }}"
            initialize_params:
              source_image: "projects/{{ gcp_project }}/global/images/{{ item.instance_image }}"
              disk_size_gb: 20
              disk_type: pd-balanced
        project: "{{ gcp_project }}"
        zone: "{{ gcp_zone }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_service_account_file }}"
        state: present
      loop: "{{ gcp_instances }}"
      register: __create_instances
      tags:
        - create-instances

    - name: Get gcp node instance info
      google.cloud.gcp_compute_instance_info: # noqa syntax-check
        zone: "{{ gcp_zone }}"
        filters:
          - labels.role = "instruqt-lab"
        project: "{{ gcp_project }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_service_account_file }}"
      register: _mesh_node_instance_info
      tags:
        - create-instances
        - controller-install
        - controller-config

    - name: Remove previous known_hosts keys from localhost
      ansible.builtin.known_hosts:
        name: "{{ item.networkInterfaces[0].accessConfigs[0].natIP }}"
        state: absent
      loop: "{{ _mesh_node_instance_info.resources }}"
      tags:
        - create-instances
        - ssh-key

    - name: Wait for SSH to come up
      ansible.builtin.wait_for:
        host: "{{ item.networkInterfaces[0].accessConfigs[0].natIP }}"
        port: 22
        delay: 10
        timeout: 60
      loop: "{{ _mesh_node_instance_info.resources }}"
      tags:
        - create-instances

    - name: Add gcp node hosts to inventory
      ansible.builtin.add_host:
        name: "{{ item.name }}"
        groups: "execnodes"
        ansible_host: "{{ item.networkInterfaces[0].accessConfigs[0].natIP }}"
      args: "{{ gcp_inventory_host_vars }}"
      loop: "{{ _mesh_node_instance_info.resources }}"
      when: ('"hop" in item.labels["mesh-type"]') or ('"execution" in item.labels["mesh-type"]')
      tags:
        - create-instances

    - name: Add gcp controller hosts to inventory
      ansible.builtin.add_host:
        name: "{{ item.name }}"
        groups: "automationcontroller"
        ansible_host: "{{ item.networkInterfaces[0].accessConfigs[0].natIP }}"
      args: "{{ gcp_inventory_host_vars }}"
      loop: "{{ _mesh_node_instance_info.resources }}"
      when: '"controller" in item.labels["mesh-type"]'
      tags:
        - create-instances
        - controller-install
        - controller-config

    - name: Create temp dir for ssh keys
      ansible.builtin.tempfile:
        state: directory
        prefix: instruqt_ssh_
      register: _ssh_tempdir
      tags:
        - create-instances
        - controller-install
        - controller-config

    - name: Generate temp OpenSSH key pair for nodes
      community.crypto.openssh_keypair:
        path: "{{ _ssh_tempdir.path }}/instruqt_lab"
        force: true
      tags:
        - create-instances
        - controller-install

# Run configuration on all mesh instances
- name: Run config and setup on instances
  hosts: all
  become: true
  gather_facts: false

  tasks:
    - name: Add instruqt_lab ssh key to authorized keys on nodes
      ansible.posix.authorized_key:
        user: "{{ ansible_user }}"
        state: present
        key: "{{ lookup('file', '{{ hostvars.localhost._ssh_tempdir.path }}/instruqt_lab.pub') }}"
        comment: "Instruqt lab key"
      tags:
        - ssh-key
        - controller-install

    - name: Enable RHUI repos for aap install
      ansible.builtin.command: >
        dnf config-manager --set-enabled rhui*
      tags:
        - controller-install

# configure the controller instance
- name: Setup controller
  hosts: automationcontroller
  gather_facts: true
  become: true

  tasks:
    - name: Download collections
      ansible.builtin.command: "ansible-galaxy collection install {{ item }} --upgrade"
      become_user: "{{ ansible_user }}"
      loop:
        - awx.awx
        - fedora.linux_system_roles
      register: __collection_install
      changed_when: '"Starting collection install process" in __collection_install.stdout'
      tags:
        - install-collections
        - controller-install

    - name: Copy instruqt_lab private key to controller
      ansible.builtin.copy:
        src: "{{ hostvars.localhost._ssh_tempdir.path }}/"
        dest: "/home/{{ ansible_user }}/.ssh/"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0600"
        force: true
      tags:
        - controller-install
        - ssh-key

    - name: Setup aap directory
      ansible.builtin.include_role:
        name: ansible.workshops.control_node
        tasks_from: 10_aap_setup.yml
        apply:
          tags:
            - controller-install
      tags:
        - controller-install

    - name: Create controller repo
      ansible.builtin.include_role:
        name: ansible.workshops.aap_repo
        apply:
          tags:
            - controller-install
      tags:
        - controller-install

    - name: Install controller dependencies
      ansible.builtin.dnf:
        name:
          - subscription-manager-rhsm-certificates
          - jq
          - automation-controller-cli
          - git
          - svn
          - rhel-system-roles
        state: present
      register: dnf_check
      until: dnf_check is not failed
      retries: 4
      delay: 5
      tags:
        - controller-install

    - name: Create controller.cfg file for controller node
      ansible.builtin.template:
        src: controller.cfg.j2
        dest: "/tmp/setup-scripts/controller.cfg"
      when: controllerinstall is defined and controllerinstall | bool
      tags:
        - controller-install

    - name: Get gcp node instance info
      gcp_compute_instance_info:
        zone: "{{ gcp_zone }}"
        filters:
          - labels.role = "instruqt-lab"
        project: "{{ gcp_project }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_service_account_file }}"
      delegate_to: localhost
      become: false
      register: _mesh_node_instance_info
      tags:
        - controller-install
        - controller-config

    - name: Template AAP setup inventory file for Instruqt mesh lab
      ansible.builtin.template:
        # src: "{{ mesh_inventory_template }}"
        src: "{{ mesh_inventory_template | default('mesh_config_install.j2') }}"
        dest: "{{ aap_dir }}/inventory"
      tags:
        - controller-install

    - name: Install generic ansible.cfg in home directory
      ansible.builtin.template:
        src: ansible.cfg.j2
        dest: "/etc/ansible/ansible.cfg"
      tags:
        - controller-install

    - name: Run the controller mesh lab installer
      ansible.builtin.shell: "{{ controller_install_command }}"
      args:
        chdir: "{{ aap_dir }}"
      async: 2100
      poll: 15
      tags:
        - controller-install
        - aap-install

    - name: Wait for Automation Controller to be up
      ansible.builtin.uri:
        url: https://localhost/api/v2/ping/
        method: GET
        user: admin
        password: "{{ admin_password | default('ansible123!') }}"
        validate_certs: false
      register: check2
      until: check2.json is defined and check2.json.instances[0].capacity > 0 and check2.json.instance_groups[0].capacity > 0
      retries: 60
      delay: 10
      tags:
        - controller-install

    - name: Display /api/v2/ping results
      ansible.builtin.debug:
        msg: '{{ check2.json }}'
      tags:
        - controller-install

    - name: Load license block
      block:
        - name: Check for base64 variable first
          ansible.builtin.copy:
            dest: '{{ playbook_dir }}/manifest.zip'
            content: '{{ base64_manifest | b64decode }}'
          delegate_to: localhost
          become: false
      rescue:
        - name: Unable to load base64_manifest
          ansible.builtin.debug:
            msg: 'No base64_manifest variable found, trying to open manifest.zip'
      always:
        - name: Load manifest into variable
          ansible.builtin.slurp:
            src: "{{ playbook_dir }}/manifest.zip"
          register: manifest_file
          delegate_to: localhost
          become: false
      tags:
        - controller-install

    - name: Install code server
      ansible.builtin.include_role:
        name: ansible.workshops.code_server
        apply:
          tags:
            - code-server-install
      tags:
        - code-server-install


# Create lab controller objects
- name: Instruqt controller objects mesh lab
  hosts: automationcontroller
  gather_facts: true
  become: true

  tasks:
    - name: Include common controller tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/30_mesh_lab_controller_config.yml"
      tags:
        - controller-config

# Run cleanup tasks on images
- name: Run config and setup on instances
  hosts: all
  become: true
  gather_facts: false

  tasks:
    - name: Include common image cleanup tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/10_image_cleanup.yml"
      tags:
        - cleanup-instances

    - name: Remove known_hosts entries for root
      ansible.builtin.known_hosts:
        name: "{{ item.instance_name }}"
        state: absent
      loop: "{{ gcp_instances }}"
      tags:
        - cleanup-instances
        - ssh-key

    - name: Remove known_hosts entries for {{ ansible_user }}"
      ansible.builtin.known_hosts:
        name: "{{ item.instance_name }}"
        state: absent
      become: false
      loop: "{{ gcp_instances }}"
      tags:
        - cleanup-instances
        - ssh-key

# create the instruqt images
- name: Create instruqt images
  hosts: localhost
  gather_facts: false

  tasks:
    - name: Stop gcloud instances
      google.cloud.gcp_compute_instance:
        name: "{{ item.instance_name }}"
        status: TERMINATED
        project: "{{ gcp_project }}"
        zone: "{{ gcp_zone }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_service_account_file }}"
      loop: "{{ gcp_instances }}"
      tags:
        - create-images

    - name: Delete current GCP images
      google.cloud.gcp_compute_image:
        name: "{{ item.instance_name }}-image"
        state: absent
        project: "{{ gcp_project }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_service_account_file }}"
      loop: "{{ gcp_instances }}"
      tags:
        - create-images
        - delete-images

    - name: Create new Instruqt mesh images
      google.cloud.gcp_compute_image:
        name: "{{ item.instance_name }}-image"
        state: present
        source_disk:
          selfLink: "https://www.googleapis.com/compute/v1/projects/{{ gcp_project }}/zones/{{ gcp_zone }}/disks/{{ item.instance_name }}"
        project: "{{ gcp_project }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_service_account_file }}"
      loop: "{{ gcp_instances }}"
      tags:
        - create-images

    - name: Delete gcloud instances
      google.cloud.gcp_compute_instance:
        name: "{{ item.instance_name }}"
        state: absent
        project: "{{ gcp_project }}"
        zone: "{{ gcp_zone }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_service_account_file }}"
      loop: "{{ gcp_instances }}"
      tags:
        - create-images
        - delete-instances
