---
- name: download aap.tar.gz to install controller
  hosts: localhost
  gather_facts: false

  tasks:
    - name: get yourself some updated workshop roles
      command: ansible-galaxy collection install --verbose --force-with-deps ansible.workshops

    - name: download aap
      vars:
        offline_token: "{{ lookup('file', 'offline_token.txt')}}"
      include_role:
        name: ansible.workshops.aap_download

- name: configures automation controller node
  hosts: all
  gather_facts: true
  become: true
  vars:
    admin_password: ansible123!
    aap_dir: "/home/{{ username }}/aap_install"
    username: "{{ ansible_user }}"

  tasks:
    - name: install automation controller
      vars:
        controllerinstall: "true"
      include_role:
        name: ansible.workshops.control_node

    - name: Include common user tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/5_configure_users.yml"

    - name: install workshop dependencies
      command: "ansible-galaxy collection install --force-with-deps ansible.workshops  -p /usr/share/ansible/collections"

    - name: Install controller lab packages for controller lab
      ansible.builtin.dnf:
        state: present
        name: "{{ item }}"
      loop:
        - /var/lib/ansible-automation-platform-bundle/automation-controller-cli-4.1.1-2.el8ap.x86_64.rpm

    - name: install code server
      include_role:
        name: ansible.workshops.code_server

    - name: Include common image cleanup tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/10_image_cleanup.yml"

    - name: copy setup-scripts to tower node
      copy:
        src: ./setup-scripts
        dest: /tmp

- name: Playbook to configure ansible controller post installation
  hosts: all

  vars:
    controller_hostname: https://localhost:443
    controller_username: admin
    controller_password: ansible123!
    controller_validate_certs: false
    controller_credential_types:
      - name: "servicenow.itsm"
        description: "servicenow.itsm credential"
        kind: cloud
        inputs:
          fields:
            - id: SN_HOST
              type: string
              label: SNOW Instance
            - id: SN_USERNAME
              type: string
              label: SNOW Username
            - id: SN_PASSWORD
              type: string
              secret: true
              label: SNOW Password
          required:
            - SN_HOST
            - SN_USERNAME
            - SN_PASSWORD
        injectors:
          env:
            SN_HOST: "{% raw %}{{ '{{' }} SN_HOST {{ '}}' }}{% endraw %}"
            SN_USERNAME: "{% raw %}{{ '{{' }} SN_USERNAME {{ '}}' }}{% endraw %}"
            SN_PASSWORD: "{% raw %}{{ '{{' }} SN_PASSWORD {{ '}}' }}{% endraw %}"

  collections:
    - awx.awx
    - redhat_cop.controller_configuration

  roles:
    - {role: redhat_cop.controller_configuration.credential_types, when: controller_credential_types is defined}
