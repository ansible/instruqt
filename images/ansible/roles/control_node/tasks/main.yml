---
- hostname:
    name: "{{short_name}}"

- name: Install packages
  include_tasks: package_dependencies.yml

- name: Install ansible.cfg and vimrc in home directory
  template:
    src: ansible.cfg.j2
    dest: "/home/{{ username }}/.ansible.cfg"
    owner: "{{ username }}"
    group: "{{ username }}"

- name: Install vimrc in home directory
  template:
    src: vimrc.j2
    dest: "/home/{{ username }}/.vimrc"
    owner: "{{ username }}"
    group: "{{ username }}"

- name: setup /etc/hosts file per student
  copy:
    src: "{{ playbook_dir }}/{{ec2_name_prefix}}/{{ username }}-etchosts.txt"
    dest: "/etc/hosts"
    owner: "{{ username }}"
    group: "{{ username }}"

- name: make sure .ssh is created
  file:
    path: "/home/{{username}}/.ssh/"
    owner: "{{ username }}"
    group: "{{ username }}"
    state: directory

# This may look redundant, but you can't put these in a loop because the
# ansible_user will not be templated the way you expect when running under
# Tower/AWX

- name: copy over ssh config file for student
  template:
    src: sshconfig.j2
    dest: /home/{{ username }}/.ssh/config
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: 0700

- name: Put ssh-key in proper spot for student
  copy:
    src: "{{ playbook_dir }}/{{ec2_name_prefix}}/{{ec2_name_prefix}}-private.pem"
    dest: "/home/{{ ansible_user }}/.ssh/aws-private.pem"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0400

# It isn't really safe to use ansible_user, because it could be resolved
# in different ways, depending on where it's used.
# It should work as expected below. -ptoal

- name: copy over ssh config file for ansible_user
  template:
    src: sshconfig.j2
    dest: /home/{{ ansible_user }}/.ssh/config
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0700

- name: Put ssh-key in proper spot for student
  copy:
    src: "{{ playbook_dir }}/{{ec2_name_prefix}}/{{ec2_name_prefix}}-private.pem"
    dest: "/home/{{ username }}/.ssh/aws-private.pem"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: 0400

- name: clean out /tmp/workshops
  file:
    path: /tmp/workshops
    state: absent

- name: Clone workshops repo
  git:
    accept_hostkey: true
    clone: true
    dest: /tmp/workshops
    repo: '{{ ansible_workshops_url | default("https://github.com/ansible/workshops.git") }}'
    version: '{{ ansible_workshops_version | default("master") }}'
    refspec: '{{ ansible_workshops_refspec | default("") }}'
    force: true

- name: Move relevant exercises to correct location
  copy:
    src: '{{ "/tmp/workshops/" + exercise_src_location | default("exercises/ansible_" + workshop_type) + "/" }}'
    dest: '{{ "/home/" + username + "/" + exercise_dest_location | default(workshop_type + "-workshop") }}'
    remote_src: true
    owner: "{{ username }}"
    group: "{{ username }}"
    local_follow: true

- name: Create lab inventory directory
  file:
    state: directory
    path: /home/{{ username }}/lab_inventory

- name: Put student inventory in proper spot
  copy:
    src: "{{ playbook_dir }}/{{ec2_name_prefix}}/{{ username }}-instances.txt"
    dest: /home/{{ username }}/lab_inventory/hosts
    owner: "{{ username }}"
    group: "{{ username }}"
  when: username in inventory_hostname

- name: Copy instructor inventory to student1
  copy:
    src: "{{ playbook_dir }}/{{ec2_name_prefix}}/instructor_inventory.txt"
    dest: /tmp/instructor-inventory
    owner: "{{ username }}"
    group: "{{ username }}"
  when: '"student1" in inventory_hostname'

- name: setup control node for workshop type
  include_tasks: "{{item}}"
  with_first_found:
    - "{{role_path}}/tasks/{{workshop_type}}.yml"
    - "{{role_path}}/tasks/unsupported_workshop.yml"

- name: check to see if ansible tower is already up and running
  uri:
    url: https://localhost/api/v2/ping/
    method: GET
    user: admin
    password: "{{admin_password}}"
    validate_certs: false
    force_basic_auth: true
  register: check_tower
  ignore_errors: true
  failed_when: false
  when:
    - towerinstall is defined
    - towerinstall|bool

- name: install tower if knob is set
  include_tasks: "tower.yml"
  when:
    - towerinstall is defined
    - towerinstall|bool
    - check_tower.status != 200
