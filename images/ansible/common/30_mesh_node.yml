## Common instance tasks
- name: Check if AAP bundle file exists
  ansible.builtin.stat:
    path: "/tmp/aap.tar.gz"
  register: __aap_bundle_file

- name: Download AAP setup bundle
  when: not __aap_bundle_file.stat.exists
  block:
    - name: Generating an access token
      ansible.builtin.uri:
        url: https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
        method: POST
        body_format: form-urlencoded
        return_content: true
        body:
          grant_type: "refresh_token"
          client_id: "rhsm-api"
          refresh_token: "{{ offline_token }}"
      register: temp_token
      until: temp_token is not failed
      retries: 15
      delay: 5

    - name: Download aap.tar.gz
      ansible.builtin.get_url:
        url: "https://api.access.redhat.com/management/v1/images/{{ provided_sha_value }}/download"
        headers:
          accept: "application/json"
          Authorization: "Bearer {{ temp_token.json.access_token }}"
        dest: "/tmp/aap.tar.gz"
        checksum: "sha256: {{ provided_sha_value }}"
        mode: '0644'
      register: download_aap_tarball
      until: download_aap_tarball is not failed
      retries: 15
      delay: 20
  rescue:
    - name: Print error message
      ansible.builtin.debug:
        msg: "Unable to get offline token and download AAP setup bundle."

- name: Create directory for automation controller installer files
  ansible.builtin.file:
    path: "{{ aap_dir }}"
    owner: "{{ ansible_user }}"
    mode: '0755'
    state: directory

- name: Extract AAP tar.gz install
  ansible.builtin.unarchive:
    src: "/tmp/aap.tar.gz"
    dest: "{{ aap_dir }}"
    remote_src: true
    extra_opts: ['--strip-components=1', '--show-stored-names']

- name: Set AAP local repository
  ansible.builtin.yum_repository:
    name: aap_installer
    description: aap_installer
    baseurl: "file:///{{ aap_dir }}/bundle/packages/el{{ ansible_distribution_major_version }}/repos/"
    gpgcheck: false
  become: true

- name: Install OS packages
  ansible.builtin.dnf:
    name: "{{ instance_os_packages }}"
    state: present
  when: (instance_os_packages is defined) and (instance_os_packages | length > 0)

- name: Install Python packages - {{ ansible_user_id }}
  ansible.builtin.pip:
    name: "{{ instance_pip_packages }}"
    state: present
  become: true
  when: (instance_pip_packages is defined) and (instance_pip_packages | length > 0)
  tags:
    - controller-config

- name: Install unzip OS package for AWS install
  ansible.builtin.dnf:
    name:
      - unzip
    state: present

- name: Download AWS CLI for S3 downloads
  ansible.builtin.unarchive:
    src: "{{ aws_cli_install_package }}"
    dest: "/tmp/"
    remote_src: true
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  register: __aws_cli_download

- name: Install AWS CLI for S3 downloads
  ansible.builtin.command:
    cmd: /tmp/aws/install --install-dir /usr/local/aws --bin-dir /usr/bin/ --update
    creates: /usr/bin/aws

- name: Download setup scripts to controller /opt directory - {{ lab.s3.bucket_name }}
  ansible.builtin.command:
    cmd: "/usr/bin/aws s3 sync --no-sign-request s3://{{ lab.s3.bucket_name }}/{{ track_slug }} /opt/setup-scripts/{{ track_slug }}"
  become: true
  register: __s3_sync_output
  changed_when: '"download:" in __s3_sync_output.stdout'

- name: Download and upgrade collections - {{ inventory_hostname }}
  community.general.ansible_galaxy_install:
    type: collection
    dest: "/usr/share/ansible/collections"
    name: "{{ item }}"
  become_user: "{{ ansible_user }}"
  loop: "{{ mesh_node_collections }}"
  register: __collection_install
  when: (mesh_node_collections is defined) and (mesh_node_collections | length > 0)

- name: Download custom execution environments
  # same var used in 50_install_controller.yml to pre-populate all mesh nodes with execution environments
  when: (controller_execution_environments is defined) and (controller_execution_environments | length > 0)
  block:
    - name: Install podman collection - {{ inventory_hostname }}
      community.general.ansible_galaxy_install:
        type: collection
        name: containers.podman

    - name: Log into registry.redhat.io
      become_user: "awx"
      no_log: true
      containers.podman.podman_login:
        registry: "registry.redhat.io"
        username: "{{ registry_username }}"
        password: "{{ registry_password }}"

    - name: Pull execution environment images
      become_user: "awx"
      containers.podman.podman_image:
        name: "{{ item.image }}"
      loop: "{{ controller_execution_environments }}"
      register: __podman_pull_supported
      until: __podman_pull_supported is not failed
      retries: 40
      delay: 2
