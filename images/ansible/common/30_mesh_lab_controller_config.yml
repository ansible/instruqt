##
# Create controller objects for mesh lab
# Tags:
# controller-config - Setup controller env for lab
# auth-token - create controller auth-token
##
# - name: Perform common controller config tasks
#   hosts: automationcontroller
#   gather_facts: true
#   become: true

## Create auth token
# tasks:
- name: Get auth token and restart automation-controller if it fails
  block: # noqa syntax-check
    - name: Refresh facts
      ansible.builtin.setup:
        filter:
          - ansible_local

    - name: Create oauth token
      awx.awx.token:
        description: 'Instruqt lab'
        scope: "write"
        state: present
        controller_host: "{{ controller_hostname }}"
        controller_username: "{{ controller_admin_user }}"
        controller_password: "{{ controller_admin_password }}"
        validate_certs: false
      register: _auth_token
      until: _auth_token is not failed
      delay: 3
      retries: 5
  rescue:
    - name: In rescue block for auth token
      ansible.builtin.debug:
        msg: "failed to get auth token. Restarting automation controller service"

    - name: Restart the controller service
      ansible.builtin.service:
        name: automation-controller
        state: restarted

    - name: Ensure tower/controller is online and working
      ansible.builtin.uri:
        url: https://localhost/api/v2/ping/
        method: GET
        user: "{{ controller_admin_user }}"
        password: "{{ controller_admin_password }}"
        validate_certs: false
        force_basic_auth: true
      register: controller_online
      until: controller_online is success
      delay: 3
      retries: 5

    - name: Retry getting auth token
      awx.awx.token:
        description: 'Instruqt lab'
        scope: "write"
        state: present
        controller_host: "{{ controller_hostname }}"
        controller_username: "{{ controller_admin_user }}"
        controller_password: "{{ controller_admin_password }}"
        validate_certs: false
      register: _auth_token
      until: _auth_token is not failed
      delay: 3
      retries: 5
  always:
    - name: Create fact.d dir
      ansible.builtin.file:
        path: "{{ custom_facts_dir }}"
        state: directory
        recurse: true
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0755
      become: true

    - name: Create _auth_token custom fact
      ansible.builtin.copy:
        content: "{{ _auth_token.ansible_facts }}"
        dest: "{{ custom_facts_dir }}/{{ custom_facts_file }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644
      become: true
  check_mode: false
  when: ansible_local.custom_facts.controller_token is undefined
  tags:
    - auth-token

- name: Refresh facts
  ansible.builtin.setup:
    filter:
      - ansible_local
  when: ansible_local.custom_facts.controller_token is undefined
  tags:
    - always

- name: Create auth token fact
  ansible.builtin.set_fact:
    auth_token: "{{ ansible_local.custom_facts.controller_token }}"
    cacheable: true
  when:
    - ansible_local.custom_facts.controller_token is defined
    - auth_token is undefined
  tags:
    - always


## Controller objects
- name: Demo content - Create demo org to delete content
  awx.awx.organization:
    name: "Default"
    state: present
    controller_oauthtoken: "{{ auth_token }}"
    controller_host: "{{ controller_hostname }}"
    validate_certs: "{{ controller_validate_certs }}"
  tags:
    - controller-config
    - demo-content

- name: Demo content - remove job template
  awx.awx.job_template:
    name: "Demo Job Template"
    state: absent
    controller_oauthtoken: "{{ auth_token }}"
    controller_host: "{{ controller_hostname }}"
    validate_certs: "{{ controller_validate_certs }}"
  tags:
    - controller-config
    - demo-content

- name: Demo content - remove project
  awx.awx.project:
    name: "Demo Project"
    state: absent
    organization: "Default"
    controller_oauthtoken: "{{ auth_token }}"
    controller_host: "{{ controller_hostname }}"
    validate_certs: "{{ controller_validate_certs }}"
  tags:
    - controller-config
    - demo-content

- name: Demo content - remove inventory
  awx.awx.inventory:
    name: "Demo Inventory"
    state: absent
    organization: "Default"
    controller_oauthtoken: "{{ auth_token }}"
    controller_host: "{{ controller_hostname }}"
    validate_certs: "{{ controller_validate_certs }}"
  tags:
    - controller-config
    - demo-content

- name: Demo content - remove credential
  awx.awx.credential:
    name: "Demo Credential"
    credential_type: "Machine"
    state: absent
    controller_oauthtoken: "{{ auth_token }}"
    controller_host: "{{ controller_hostname }}"
    validate_certs: "{{ controller_validate_certs }}"
  tags:
    - controller-config
    - demo-content

- name: Demo content - remove organization
  awx.awx.organization:
    name: "Default"
    state: absent
    controller_oauthtoken: "{{ auth_token }}"
    controller_host: "{{ controller_hostname }}"
    validate_certs: "{{ controller_validate_certs }}"
  tags:
    - controller-config
    - demo-content

- name: Add lab Organization
  awx.awx.organization:
    name: "{{ lab_organization }}"
    description: "ACME Corp Organization"
    state: present
    controller_oauthtoken: "{{ auth_token }}"
    controller_host: "{{ controller_hostname }}"
    validate_certs: "{{ controller_validate_certs }}"
  when: (lab_organization is defined) and (lab_organization | length > 0)
  tags:
    - controller-config
    - lab-org

- name: Add lab inventories
  awx.awx.inventory:
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    organization: "{{ lab_organization }}"
    state: present
    controller_oauthtoken: "{{ auth_token }}"
    controller_host: "{{ controller_hostname }}"
    validate_certs: "{{ controller_validate_certs }}"
  when: (lab_inventories is defined) and (lab_inventories | length > 0)
  loop: "{{ lab_inventories }}"
  tags:
    - controller-config

- name: Create hosts
  awx.awx.host:
    name: "{{ item.lab_host_name }}"
    inventory: "{{ item.lab_host_inventory }}"
    state: present
    controller_oauthtoken: "{{ auth_token }}"
    controller_host: "{{ controller_hostname }}"
    validate_certs: "{{ controller_validate_certs }}"
    variables: "{{ item.lab_host_vars }}"
  when: (lab_hosts is defined) and (lab_hosts | length > 0)
  loop: "{{ lab_hosts }}"
  tags:
    - controller-config

- name: Create lab groups and add hosts
  awx.awx.group:
    name: "{{ item.group_name }}"
    description: "{{ item.group_desc | default(omit) }}"
    inventory: "{{ item.group_inventory | default(lab_organization) }}"
    state: "{{ item.group_state | default('present') }}"
    hosts: "{{ item.group_hosts | default(omit) }}"
    controller_oauthtoken: "{{ auth_token }}"
    controller_host: "{{ controller_hostname }}"
    validate_certs: "{{ controller_validate_certs }}"
  loop: "{{ lab_groups }}"
  when: (lab_groups is defined) and (lab_groups | length > 0)
  tags:
    - controller-config
    - lab-groups

- name: Fetch the lab ssh private key
  ansible.builtin.slurp:
    src: "/home/{{ ansible_user }}/.ssh/instruqt_lab"
  register: __lab_pvt_key
  tags:
    - controller-config
    - lab-cred

- name: Add the lab machine credential
  awx.awx.credential:
    name: "{{ lab_credential_name }}"
    organization: "{{ lab_organization }}"
    credential_type: Machine
    inputs:
      ssh_key_data: "{{ __lab_pvt_key.content | b64decode }}"
    controller_oauthtoken: "{{ auth_token }}"
    controller_host: "{{ controller_hostname }}"
    validate_certs: "{{ controller_validate_certs }}"
  when: (lab_credential_name is defined) and (lab_credential_name | length > 0)
  tags:
    - controller-config
    - lab-cred

- name: Add the lab project
  awx.awx.project:
    name: "{{ lab_project_name }}"
    scm_type: git
    scm_url: "{{ lab_project_repo }}"
    organization: "{{ lab_organization }}"
    scm_update_on_launch: false
    scm_update_cache_timeout: 60
    scm_branch: "{{ lab_project_repo_branch }}"
    wait: true
    controller_oauthtoken: "{{ auth_token }}"
    controller_host: "{{ controller_hostname }}"
    validate_certs: "{{ controller_validate_certs }}"
  when: (lab_project_name is defined) and (lab_project_name | length > 0)
  tags:
    - controller-config
    - lab-project

- name: Create instance groups
  awx.awx.instance_group:
    state: present
    name: "{{ item.lab_instance_group_name }}"
    instances: "{{ item.lab_instance_group_hosts }}"
    controller_oauthtoken: "{{ auth_token }}"
    controller_host: "{{ controller_hostname }}"
    validate_certs: "{{ controller_validate_certs }}"
  loop: "{{ lab_instance_groups }}"
  when: (lab_instance_groups is defined) and (lab_instance_groups| length > 0)
  tags:
    - controller-config

- name: Add instance groups and inventories
  awx.awx.inventory:
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    organization: "{{ lab_organization }}"
    state: present
    instance_groups: "{{ item.inv_instance_groups }}"
    controller_oauthtoken: "{{ auth_token }}"
    controller_host: "{{ controller_hostname }}"
    validate_certs: "{{ controller_validate_certs }}"
  loop: "{{ lab_inventories }}"
  when: (lab_inventories is defined) and (lab_inventories | length > 0)
  tags:
    - controller-config

- name: Create job templates
  awx.awx.job_template:
    name: "{{ item.jt_name }}"
    state: present
    become_enabled: "{{ item.jt_become }}"
    project: "{{ lab_project_name }}"
    credential: "{{ lab_credential_name }}"
    inventory: "{{ item.jt_inventory }}"
    playbook: "{{ item.jt_playbook }}"
    survey_enabled: "{{ item.survey_enabled | default(omit) }}"
    survey_spec: "{{ item.survey_spec | default(omit) }}"
    ask_inventory_on_launch: "{{ item.jt_prompt_inventory }}"
    ask_variables_on_launch: "{{ item.jt_prompt_inventory | default(omit)}}"
    extra_vars: "{{ item.jt_extra_vars | default(omit) }}"
    controller_oauthtoken: "{{ auth_token }}"
    validate_certs: false
  loop: "{{ lab_job_templates }}"
  when: (lab_job_templates is defined) and (lab_job_templates | length > 0)
  tags:
    - controller-config
    - controller-jts

- name: Create Workflows
  awx.awx.tower_workflow_job_template:
    name: "{{ item.workflow_name }}"
    inventory: "{{ item.workflow_inventory | default(omit) }}"
    extra_vars: "{{ item.workflow_vars | default(omit) }}"
    ask_variables_on_launch: "{{ item.workflow_prompt_vars | default(false) }}"
    organization: "{{ item.workflow_org | default(omit)}}"
    schema: "{{ item.workflow_schema | default(omit)}}"
    controller_oauthtoken: "{{ auth_token }}"
    controller_host: "{{ controller_hostname }}"
    validate_certs: "{{ controller_validate_certs }}"
  loop: "{{ lab_jt_worklows }}"
  when: (lab_jt_worklows is defined) and (lab_jt_worklows | length > 0)
  tags:
    - controller-config
    - controller-workflows

- name: Add nodes to lab workflow
  awx.awx.workflow_job_template_node:
    state: present
    identifier: "{{ item.workflow_node_id }}"
    workflow_job_template: "{{ item.workflow_node_jt }}"
    organization: "{{ item.workflow_node_org }}"
    approval_node: "{{ item.workflow_node_approval | default(omit) }}"
    unified_job_template: "{{ item.workflow_node_unified_jt | default(omit) }}"
    success_nodes: "{{ item.workflow_node_success_nodes | default(omit) }}"
    controller_oauthtoken: "{{ auth_token }}"
    controller_host: "{{ controller_hostname }}"
    validate_certs: "{{ controller_validate_certs }}"
  loop: "{{ lab_jt_worklow_nodes }}"
  when: (lab_jt_worklow_nodes is defined) and (lab_jt_worklow_nodes | length > 0)
  tags:
    - controller-config
    - controller-workflows

- name: Add controller users
  awx.awx.user:
    username: "{{ item.student_username }}"
    password: "{{ item.student_password }}"
    organization: "{{ item.student_organization | default(lab_organization) }}"
    is_superuser: "{{ item.student_superuser }}"
    state: present
    controller_oauthtoken: "{{ auth_token }}"
    controller_host: "{{ controller_hostname }}"
    validate_certs: "{{ controller_validate_certs }}"
  loop: "{{ controller_user_vars }}"
  when: (controller_user_vars is defined) and (controller_user_vars | length > 0)
  tags:
    - controller-config
    - controller-users

- name: Give users access to controller objects
  awx.awx.role:
    user: "{{ item.student_username }}"
    role: "{{ item.student_role }}"
    organizations: "{{ item.organizations | default(omit) }}"
    job_templates: "{{ item.job_templates | default(omit) }}"
    workflows: "{{ item.workflows | default(omit) }}"
    projects: "{{ item.projects | default(omit) }}"
    state: "{{ item.state }}"
    controller_oauthtoken: "{{ auth_token }}"
    controller_host: "{{ controller_hostname }}"
    validate_certs: "{{ controller_validate_certs }}"
  loop: "{{ controller_user_vars }}"
  when: (controller_user_vars is defined) and (controller_user_vars | length > 0)
  tags:
    - controller-config
    - controller-users
