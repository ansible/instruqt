---
##
# Perform AAP post-install tasks
# Tags:
# demo-content - Remove Demo Org, project, inventory and job template
##
- name: Create controller_login fact and anchor
  ansible.builtin.set_fact:
    controller_login: &controller_login
      controller_username: "{{ controller_username }}"
      controller_password: "{{ controller_password }}"
      controller_host: "{{ controller_hostname }}"
      validate_certs: "{{ controller_validate_certs }}"

- name: Install EPEL repository
  ansible.builtin.yum_repository:
    name: epel
    description: EPEL YUM repo
    baseurl: https://dl.fedoraproject.org/pub/epel/$releasever/Everything/$basearch
    gpgkey: "https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-{{ ansible_distribution_major_version }}"
    gpgcheck: true
    state: present

- name: Install OS packages needed for tasks
  ansible.builtin.dnf:
    name:
      - python3-pip
      - python3-boto3
      - python3-botocore
      - unzip
      - ansible-core
    state: present

- name: Install OS packages - controller_os_packages
  ansible.builtin.dnf:
    name: "{{ controller_os_packages }}"
    state: present
  when: (controller_os_packages is defined) and (controller_os_packages | length > 0)

- name: Install Python packages - controller_pip_packages
  ansible.builtin.pip:
    name: "{{ controller_pip_packages }}"
    state: present
  when: (controller_pip_packages is defined) and (controller_pip_packages | length > 0)

- name: Download and upgrade controller collections - {{ inventory_hostname }}
  community.general.ansible_galaxy_install:
    name: "{{ item }}"
    dest: /usr/share/ansible/collections
    type: collection
  loop: "{{ controller_collections }}"
  register: __collection_install
  when: (controller_collections is defined) and (controller_collections | length > 0)

- name: Download AWS CLI for S3 downloads
  ansible.builtin.unarchive:
    src: "{{ aws_cli_install_package }}"
    dest: "/tmp/"
    remote_src: true
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  become: false
  register: __aws_cli_download

- name: Install generic ansible.cfg in home directory
  ansible.builtin.template:
    src: ansible.cfg.j2
    dest: "/etc/ansible/ansible.cfg"
    mode: '644'

#  Added for student command line tasks
- name: Copy ansible-navigator.yml template - {{ student_username }}
  ansible.builtin.template:
    src: "ansible-navigator.yml.j2"
    dest: "~{{ student_username }}/.ansible-navigator.yml"
    mode: "644"
    owner: "{{ student_username }}"
    group: "{{ student_username }}"
  when: lab.navigator_execution_environment is defined

- name: Check '{{ track_slug }}/vault_password.j2' template exists # noqa name[template]
  ansible.builtin.stat:
    path: "{{ playbook_dir }}/templates/{{ track_slug }}/vault_password.j2"
  delegate_to: localhost
  become: false
  register: __ansible_vault_password_file

 # ansible_user_id is root because of become: true
- name: Copy vault_password file - {{ ansible_user_id }}
  when: __ansible_vault_password_file.stat.exists
  become: true
  ansible.builtin.template:
    src: "{{ track_slug }}/vault_password.j2"
    dest: "~{{ ansible_user_id }}/.{{ track_slug }}_ansible_vault_password"
    mode: "640"
    owner: "{{ ansible_user_id }}"
    group: "wheel"

- name: Install AWS CLI for S3 downloads in lifecycle scripts
  ansible.builtin.command:
    cmd: /tmp/aws/install --install-dir /usr/local/aws --bin-dir /usr/bin/ --update
    creates: /usr/bin/aws

- name: Get the file list from {{ lab["s3"]["bucket_name"] }}
  become: false
  delegate_to: localhost
  amazon.aws.s3_object:
    bucket: "{{ lab['s3']['bucket_name'] }}"
    mode: list
    prefix: "{{ track_slug }}"
  register: __s3_bucket_list

#  Using aws cli because amazon.aws.s3_object module doesn't support "remote" features and needs AWS credentials.
- name: Download S3 setup files to controller /opt/setup-scripts/{{ track_slug }}
  ansible.builtin.command:
    cmd: "/usr/bin/aws s3 sync --no-sign-request s3://{{ lab['s3']['bucket_name'] }}/{{ track_slug }} /opt/setup-scripts/{{ track_slug }}"
  register: __s3_sync_output
  changed_when: '"download:" in __s3_sync_output.stdout'
  when: __s3_bucket_list['s3_keys'] | length > 0

# This changes standard controller image admin password to controller_password.
- name: Update controller image admin password
  ansible.builtin.expect:
    command: awx-manage changepassword admin
    responses:
      Password: "{{ controller_password }}"
      Password (again): "{{ controller_password }}"

## Remove controller demo content
- name: Remove pre-created demo content
  delegate_to: localhost
  become: false
  tags:
    - demo-content
  block:
    - name: Demo content - create organization
      awx.awx.organization:
        name: "Default"
        state: present
        <<: *controller_login

    - name: Demo content - remove job template
      awx.awx.job_template:
        name: "Demo Job Template"
        state: absent
        <<: *controller_login

    - name: Demo content - remove project
      awx.awx.project:
        name: "Demo Project"
        state: absent
        organization: "Default"
        <<: *controller_login

    - name: Demo content - remove inventory
      awx.awx.inventory:
        name: "Demo Inventory"
        state: absent
        organization: "Default"
        <<: *controller_login

    - name: Demo content - remove credential
      awx.awx.credential:
        name: "Demo Credential"
        credential_type: "Machine"
        state: absent
        <<: *controller_login

    - name: Demo content - remove organization
      awx.awx.organization:
        name: "Default"
        state: absent
        <<: *controller_login

- name: Download custom execution environments
  when: (controller_execution_environments is defined) and (controller_execution_environments | length > 0)
  block:
    - name: Install containers.podman collection
      community.general.ansible_galaxy_install:
        name: containers.podman
        dest: /usr/share/ansible/collections
        type: collection
      register: __collection_install

    - name: Log into registry.redhat.io
      become_user: "{{ item }}"
      containers.podman.podman_login:
        registry: "registry.redhat.io"
        username: "{{ registry_username }}"
        password: "{{ registry_password }}"
      no_log: true
      loop:
        - "{{ student_username }}"
        - awx

    - name: Pull execution environment images - awx
      become_user: "awx"
      containers.podman.podman_image:
        name: "{{ item.image }}"
      loop: "{{ controller_execution_environments }}"
      register: __podman_pull_supported_awx
      until: __podman_pull_supported_awx is not failed
      retries: 40
      delay: 2

    - name: Pull execution environment images - {{ student_username }}
      become_user: "{{ student_username }}"
      containers.podman.podman_image:
        name: "{{ item.image }}"
      loop: "{{ controller_execution_environments }}"
      register: __podman_pull_supported_student
      until: __podman_pull_supported_student is not failed
      retries: 40
      delay: 2

    #  Added for track lifecycle scripts - root
    - name: Pull execution environment images - {{ ansible_user_id }}
      containers.podman.podman_image:
        name: "{{ item.image }}"
      loop: "{{ controller_execution_environments }}"
      register: __podman_pull_supported_student
      until: __podman_pull_supported_student is not failed
      retries: 40
      delay: 2
