##
# Create controller objects for mesh lab
##
- name: Install OS packages needed for tasks
  ansible.builtin.dnf:
    name:
      - ansible-core
    state: present
  become: true

- name: Check if AAP bundle file exists
  ansible.builtin.stat:
    path: "/tmp/aap.tar.gz"
  register: __aap_bundle_file

- name: Download AAP setup bundle
  when: not __aap_bundle_file.stat.exists
  block:
    - name: Generating an access token
      ansible.builtin.uri:
        url: https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
        method: POST
        body_format: form-urlencoded
        return_content: true
        body:
          grant_type: "refresh_token"
          client_id: "rhsm-api"
          refresh_token: "{{ offline_token }}"
      register: temp_token
      until: temp_token is not failed
      retries: 15
      delay: 5

    - name: Download aap.tar.gz
      ansible.builtin.get_url:
        url: "https://api.access.redhat.com/management/v1/images/{{ provided_sha_value }}/download"
        headers:
          accept: "application/json"
          Authorization: "Bearer {{ temp_token.json.access_token }}"
        dest: "/tmp/aap.tar.gz"
        checksum: "sha256: {{ provided_sha_value }}"
        mode: '0644'
        owner: "{{ ansible_user }}"
      register: download_aap_tarball
      until: download_aap_tarball is not failed
      retries: 30
      delay: 5

- name: Create directory for automation controller
  ansible.builtin.file:
    path: "{{ aap_dir }}"
    state: directory
    owner: "{{ ansible_user }}"
    mode: '0755'

- name: Extract AAP tar.gz install
  ansible.builtin.unarchive:
    src: "/tmp/aap.tar.gz"
    dest: "{{ aap_dir }}"
    remote_src: true
    extra_opts: ['--strip-components=1', '--show-stored-names']

- name: Set AAP local repository
  ansible.builtin.yum_repository:
    name: aap_installer
    description: aap_installer
    baseurl: "file:///{{ aap_dir }}/bundle/packages/el{{ ansible_distribution_major_version }}/repos/"
    gpgcheck: false
  become: true

- name: Template AAP setup inventory
  ansible.builtin.template:
    src: "{{ track_slug }}_inv.j2"
    dest: "{{ aap_dir }}/inventory"
    owner: "{{ ansible_user }}"
    mode: '0644'

- name: Run controller setup - {{ inventory_hostname }}
  ansible.builtin.shell: "{{ controller_install_command }}" # noqa command-instead-of-shell
  args:
    chdir: "{{ aap_dir }}"
  async: 2100
  poll: 15

- name: Wait for Automation Controller to be up
  ansible.builtin.uri:
    url: https://localhost/api/v2/ping/
    method: GET
    user: "{{ controller_username }}"
    password: "{{ controller_password }}"
    validate_certs: false
  register: check2
  until: check2.json is defined and check2.json.instances[0].capacity > 0 and check2.json.instance_groups[0].capacity > 0
  retries: 60
  delay: 5

- name: Display /api/v2/ping results
  ansible.builtin.debug:
    msg: '{{ check2.json }}'

- name: Subscribe AAP
  delegate_to: localhost
  become: false
  block:
    - name: Apply base64_manifest licenses
      ansible.builtin.copy: # noqa template-instead-of-copy
        dest: "{{ playbook_dir }}/manifest.zip"
        content: "{{ base64_manifest | b64decode }}"
        mode: '0644'
      when: base64_manifest is defined

    - name: Apply license with manifest.zip
      ansible.builtin.slurp:
        src: "{{ playbook_dir }}/manifest.zip"
      when: base64_manifest is undefined
      register: manifest_file
  always:
    - name: Assert manifest.zip exists
      ansible.builtin.assert:
        that:
          - manifest_file is defined
          - manifest_file | length > 0
        fail_msg: |
          AAP subscription manifest not found or empty.
        success_msg:
          Successfully loaded AAP subscription manifest file

- name: Post manifest file
  ansible.builtin.uri:
    url: https://localhost/api/v2/config/
    method: POST
    user: "{{ controller_username }}"
    password: "{{ controller_password }}"
    body: '{ "eula_accepted": true, "manifest": "{{ manifest_file.content }}" }'
    body_format: json
    validate_certs: false
    force_basic_auth: true
  register: license_controller
  until: license_controller is not failed
  retries: 5

- name: Wait for controller to be up
  ansible.builtin.uri:
    url: https://localhost/api/v2/ping/
    method: GET
    user: "{{ controller_username }}"
    password: "{{ controller_password }}"
    validate_certs: false
  register: check2
  until: check2.json is defined and check2.json.instances[0].capacity > 0 and check2.json.instance_groups[0].capacity > 0
  retries: 60
  delay: 1
