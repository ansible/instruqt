---
##
# lightspeed-101_vars.yml
##

# Ansible config vars - the need for speed
ansible_ssh_pipelining: true
ansible_ssh_extra_args: -o StrictHostKeyChecking=no -o ControlMaster=auto -o ControlPersist=60s

track_slug: lightspeed-101
ansible_user: "{{ admin_username }}"

# AAP vars
aap_dir: /home/{{ ansible_user }}/aap_install
controller_install_command: ANSIBLE_BECOME_METHOD='sudo' ANSIBLE_BECOME=True set -o pipefail && ./setup.sh -e registry_username='{{ registry_username }}' -e registry_password='{{ registry_password }}' # noqa yaml[line-length]
offline_token: "{{ lookup('ansible.builtin.env', 'REDHAT_OFFLINE_TOKEN') }}"
provided_sha_value: d3ecb5932c9f154ad279dd2f28ce3f711f1447b54ee92f50698a601f853644c3 # RHEL 9 2.4

# GCP vars
gcp_zone: us-central1-a
gcp_project: "{{ lookup('ansible.builtin.env', 'GCP_PROJECT', default='red-hat-mbu') }}"
gcp_service_account_file: "{{ lookup('ansible.builtin.env', 'GCP_SERVICE_ACCOUNT_FILE') }}"
gcp_service_account: "{{ lookup('ansible.builtin.env', 'GCP_SERVICE_ACCOUNT') }}"
gcp_instances:
  - name: "{{ controller_hostname }}"
    # source_image: automation-controller
    network_interfaces:
      - access_configs:
          - name: External NAT # yamllint disable-line rule:indentation
            type: ONE_TO_ONE_NAT
    disks:
      - auto_delete: true
        boot: true
        device_name: "{{ track_slug }}-controller"
        initialize_params:
          # source_image: "projects/{{ gcp_project }}/global/images/lightspeed-101-controller-image"
          source_image: projects/rhel-cloud/global/images/family/rhel-9
          # source_image: "projects/{{ gcp_project }}/global/images/rhel9"
          disk_size_gb: 40
          disk_type: pd-balanced
    labels:
      role: "{{ track_slug }}"
      mesh-type: controller
      location: raleigh
    machine_type: n2-standard-4
    metadata:
      ssh-keys: "{{ lookup('file', '~/.ssh/instruqt/instruqt_provision.pub') }}"
    tags:
      items:
        - https-server
gcp_inventory_host_vars:
  ansible_user: "{{ admin_username }}"
  ansible_ssh_private_key_file: ~/.ssh/instruqt/instruqt_provision
  ansible_host_key_checking: false
  ansible_python_interpreter: /usr/bin/python3
  ansible_ssh_pipelining: true

# Base controller custom setup vars
admin_username: "{{ vault_admin_username }}"
admin_password: "{{ vault_admin_password }}"
redhat_username: "{{ lookup('ansible.builtin.env', 'REDHAT_USERNAME', default='') }}"
redhat_password: "{{ lookup('ansible.builtin.env', 'REDHAT_PASSWORD', default='') }}"
registry_username: "{{ redhat_username }}"
registry_password: "{{ redhat_password }}"

controller_hostname: "{{ vault_controller_hostname }}"
controller_validate_certs: "{{ vault_controller_validate_certs }}"
controller_username: "{{ vault_controller_username }}"
controller_password: "{{ vault_controller_password }}"

student_username: "{{ vault_student_username }}"
student_password: "{{ vault_student_password }}"

aws_cli_install_package: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip

gitea_http_port: 8443
gitea_protocol: https
gitea_hostname: gitea
gitea_app_url: "{{ gitea_protocol }}://{{ gitea_hostname }}:{{ gitea_http_port }}"
gitea_repo_name: acme_corp
gitea_admin_username: "{{ vault_gitea_admin_username }}"
gitea_admin_password: "{{ vault_gitea_admin_password }}"
gitea_clone_address: "https://github.com/craig-br/lightspeed-demos"

vscode_settings_file: "{{ playbook_dir }}/templates/{{ track_slug }}/settings.json"

# code_server role vars
# codeserver_username: "{{ student_username }}"
# codeserver_password: "{{ student_password }}"
# codeserver_prebuild: false
# codeserver_authentication: false
# codeserver_extensions:
#   - name: redhat.ansible

# Lab vars
lab:
  credential:
    pub_ssh:
      name: ACME Corp public SSH key
    ssh:
      name: ACME Corp machine credential
    vault:
      name: ACME Corp vault credential
    controller:
      name: ACME Corp controller credential
    aws:
      name: ACME Corp AWS credential
    azure:
      name: ACME Corp Azure credential
  credential_type:
    pub_ssh:
      name: Public SSH key credential type
  organization: ACME Corp
  project:
    name: ACME Corp Repo
    repo: "{{ gitea_app_url }}/{{ student_username }}/acme_corp.git"
    # Temp
    # branch: devel
    branch: main
  inventory:
    name: ACME Corp DC
    description: ACME Corp Data center
  navigator_execution_environment:
    name: ACME Corp execution environment
    image: quay.io/acme_corp/lightspeed-101_ee
    # image: quay.io/acme_corp/summit_ee
  s3:
    # Dev
    # bucket_name: tmm-instruqt-content.demoredhat.com.dev
    # Prod
    bucket_name: tmm-instruqt-content.demoredhat.com.private
  workflow_name: Deploy App Workflow

# Lab containers
# Add container customisation env vars to /opt/setup-scripts/files/container-<container_name>.env
lab_containers:
  - name: gitea
    label:
      io.containers.autoupdate: registry
    listen_port: 8443
    image: quay.io/acme_corp/instruqt_gitea:dev
    # image: quay.io/acme_corp/instruqt_gitea:latest
    state: started
    memory: 512m
    privileged: true
    volume: gitea:/data
    publish:
      - 8443:8443
      - 2222:2222
    etc_hosts:
      gitea: 10.88.0.10
      lightspeed-101.acme.example.com: 10.88.0.1
    ip: 10.88.0.10
    network: bridge
    # env_file: /opt/setup-scripts/{{ track_slug }}/setup/files/container-gitea.env
    env:
      GITEA__server__DOMAIN: gitea
    generate_systemd:
      path: /etc/systemd/system/
      restart_policy: always
      time: 60
      names: true
      new: true
    groups:
      - containers

gnome_gsettings:
  - org.gnome.desktop.background show-desktop-icons true
  - org.gnome.desktop.wm.preferences theme 'Adwaita-dark'
  - org.gnome.desktop.lockdown disable-log-out true
  - org.gnome.desktop.lockdown disable-printing true
  - org.gnome.desktop.lockdown disable-lock-screen true
  - org.gnome.desktop.lockdown disable-print-setup true
  - org.gnome.desktop.lockdown user-administration-disabled false
  - org.gnome.shell.extensions.desktop-icons show-mount false#
  - org.gnome.shell.extensions.desktop-icons show-home false
  - org.gnome.shell.extensions.desktop-icons show-trash false
  - org.gnome.desktop.wm.preferences button-layout ":minimize,maximize,close"

controller_os_packages:
  - ansible-core
  - ansible-navigator
  - ansible-lint
  - git
  - automation-controller-cli
# VS Code extension emojis
  - google-noto-emoji-color-fonts
  - google-noto-emoji-fonts

# controller_pip_packages:
# - ansible-navigator
# - ansible-lint

controller_collections:
  - redhat_cop.controller_configuration
  - awx.awx
  - amazon.aws
  - community.aws
  - kubernetes.core
  - community.general
  - containers.podman
  - ansible.posix
  - fedora.linux_system_roles
  - azure.azcollection

# CoP Collection vars https://github.com/redhat-cop/controller_configuration
controller_configuration_credentials_secure_logging: false
controller_configuration_inventory_source_update_async_retries: 50
controller_configuration_projects_async_retries: 50
controller_configuration_secure_logging: false
controller_configuration_async_retries: 50
controller_configuration_inventory_source_update_async_delay: 5

controller_configuration_dispatcher_roles:
  - { role: settings, var: controller_settings, tags: settings }
  - { role: organizations, var: controller_organizations, tags: organizations }
  - { role: labels, var: controller_labels, tags: labels }
  - { role: users, var: controller_user_accounts, tags: users }
  - { role: teams, var: controller_teams, tags: teams }
  - { role: credential_types, var: controller_credential_types, tags: credential_types }
  - { role: credentials, var: controller_credentials, tags: credentials }
  - { role: credential_input_sources, var: controller_credential_input_sources, tags: credential_input_sources }
  - { role: notification_templates, var: controller_notifications, tags: notification_templates }
  - { role: projects, var: controller_projects, tags: projects }
  - { role: execution_environments, var: controller_execution_environments, tags: execution_environments }
  - { role: applications, var: controller_applications, tags: applications }
  - { role: instance_groups, var: controller_instance_groups, tags: instance_groups }
  - { role: inventories, var: controller_inventories, tags: inventories }
  - { role: project_update, var: controller_projects, tags: projects }
  - { role: inventory_sources, var: controller_inventory_sources, tags: inventory_sources }
  - { role: inventory_source_update, var: controller_inventory_sources, tags: inventory_sources }
  - { role: hosts, var: controller_hosts, tags: hosts }
  - { role: groups, var: controller_groups, tags: inventories }
  - { role: job_templates, var: controller_templates, tags: job_templates }
  - { role: workflow_job_templates, var: controller_workflows, tags: workflow_job_templates }
  - { role: schedules, var: controller_schedules, tags: schedules }
  - { role: roles, var: controller_roles, tags: roles }

controller_settings:
  settings:
    AWX_TASK_ENV:
      GIT_SSL_NO_VERIFY: "True"

controller_organizations:
  - name: "{{ lab.organization }}"
    description: "{{ lab.organization }}"
    state: present

controller_credential_types:
  - name: "{{ lab.credential_type.pub_ssh.name }}"
    description: "{{ lab.credential_type.pub_ssh.name }}"
    inputs:
      fields:
        - id: pub_ssh_key_data
          type: string
          label: SSH Public key
          secret: true
      required:
        - pub_ssh_key_data
    injectors:
      extra_vars:
        pub_key_data: !unsafe "{{ pub_ssh_key_data }}"

controller_credentials:
  - name: "{{ lab.credential.pub_ssh.name }}"
    description: "{{ lab.credential.ssh.name }}"
    organization: "{{ lab.organization }}"
    credential_type: "{{ lab.credential_type.pub_ssh.name }}"
    inputs:
      pub_ssh_key_data: "{{ lookup('file', hostvars.localhost._ssh_tempdir.path + '/instruqt_lab.pub') }}"
  - name: "{{ lab.credential.ssh.name }}"
    description: "{{ lab.credential.ssh.name }}"
    organization: "{{ lab.organization }}"
    credential_type: Machine
    inputs:
      ssh_key_data: "{{ lookup('file', hostvars.localhost._ssh_tempdir.path + '/instruqt_lab') }}"
  - name: "{{ lab.credential.controller.name }}"
    organization: "{{ lab.organization }}"
    credential_type: Red Hat Ansible Automation Platform
    description: "{{ lab.credential.controller.name }}"
    inputs:
      host: "{{ track_slug }}-controller"
      verify_ssl: "{{ controller_validate_certs }}"
      username: "{{ controller_username }}"
      password: "{{ controller_password }}"
  - name: "{{ lab.credential.aws.name }}"
    organization: "{{ lab.organization }}"
    credential_type: Amazon Web Services
    description: "{{ lab.credential.aws.name }}"
    state: present
    inputs:
      #  Replaced in lightspeed-101-lab_setup.yml
      username: "empty"
      password: "empty"
  - name: "{{ lab.credential.azure.name }}"
    organization: "{{ lab.organization }}"
    credential_type: Microsoft Azure Resource Manager
    description: "{{ lab.credential.aws.name }}"
    state: present
    inputs:
      #  Replaced in lightspeed-101-lab_setup.yml
      subscription: "empty"
      tenant: "empty"
      username: "empty"
      password: "empty"
      client: "empty"
      secret: "empty"

controller_execution_environments:
  - name: "{{ lab.navigator_execution_environment.name }}"
    image: "{{ lab.navigator_execution_environment.image }}"
    description: "{{ lab.navigator_execution_environment.name }}"
    state: present
    pull: never

controller_projects:
  - name: "{{ lab.project.name }}"
    organization: "{{ lab.organization }}"
    state: present
    scm_branch: "{{ lab.project.branch }}"
    scm_clean: false
    scm_delete_on_update: false
    scm_type: git
    scm_url: "{{ lab.project.repo }}"
    wait: true
    update_project: true
    scm_update_on_launch: true

controller_inventories:
  - name: "{{ lab.inventory.name }}"
    organization: "{{ lab.organization }}"
    description: "{{ lab.inventory.name }}"
    variables:
      ansible_ssh_private_key_file: ~/.ssh/instruqt_lab
      ansible_host: lightspeed-101-controller
      ansible_user: rhel
      ansible_python_interpreter: /usr/bin/python3
      ansible_ssh_extra_args: '-o StrictHostKeyChecking=no -o ControlMaster=auto -o ControlPersist=60s'
      ansible_ssh_pipelining: true

controller_hosts:
  - name: controller.acme.example.com
    inventory: "{{ lab.inventory.name }}"
    enabled: true
  - name: app-01.acme.example.com
    inventory: "{{ lab.inventory.name }}"
    enabled: true
  - name: app-02.acme.example.com
    inventory: "{{ lab.inventory.name }}"
    enabled: true
  - name: monitor-01.acme.example.com
    inventory: "{{ lab.inventory.name }}"
    enabled: true
  - name: db-01.acme.example.com
    inventory: "{{ lab.inventory.name }}"
    enabled: true
  - name: web-01.acme.example.com
    inventory: "{{ lab.inventory.name }}"
    enabled: true

controller_groups:
  - name: appservers
    description: ACME Corp app servers
    inventory: "{{ lab.inventory.name }}"
    hosts:
      - app-01.acme.example.com
      - app-02.acme.example.com
  - name: monitoring
    description: ACME Corp monitoring servers
    inventory: "{{ lab.inventory.name }}"
    hosts:
      - monitor-01.acme.example.com
  - name: rhel
    description: ACME Corp monitoring servers
    inventory: "{{ lab.inventory.name }}"
    hosts:
      - monitor-01.acme.example.com
  - name: databases
    description: ACME Corp monitoring servers
    inventory: "{{ lab.inventory.name }}"
    hosts:
      - db-01.acme.example.com
  - name: webservers
    description: ACME Corp monitoring servers
    inventory: "{{ lab.inventory.name }}"
    hosts:
      - web-01.acme.example.com
  - name: automationcontroller
    description: ACME Corp automation controller
    inventory: "{{ lab.inventory.name }}"
    hosts:
      - controller.acme.example.com

# controller_templates:
#   - name: Prepare AWS demo
#     state: present
#     job_type: run
#     playbook: "playbooks/cloud/aws/prepare_aws_environment.yml"
#     execution_environment: "{{ lab.navigator_execution_environment.name }}"
#     organization: "{{ lab.organization }}"
#     inventory: "{{ lab.inventory.name }}"
#     verbosity: 0
#     credentials:
#       - "{{ lab.credential.aws.name }}"
#     project: "{{ lab.project.name }}"
#     extra_vars:
#       _SANDBOX_ID: "{{ lookup('ansible.builtin.env', '_SANDBOX_ID') }}" # Updated in Instruqt lifecycle script.
#   - name: Prepare Azure demo
#     state: present
#     job_type: run
#     playbook: "playbooks/cloud/azure/prepare_azure_environment.yml"
#     execution_environment: "{{ lab.navigator_execution_environment.name }}"
#     organization: "{{ lab.organization }}"
#     inventory: "{{ lab.inventory.name }}"
#     verbosity: 0
#     credentials:
#       - "{{ lab.credential.azure.name }}"
#     project: "{{ lab.project.name }}"
#     extra_vars:
#       _SANDBOX_ID: "{{ lookup('ansible.builtin.env', '_SANDBOX_ID') }}" # Updated in Instruqt lifecycle script.

controller_user_accounts:
  - user: "{{ student_username }}"
    state: present
    is_superuser: false
    password: "{{ student_password }}"
    email: "{{ student_username }}@acme.example.com"
    organization: "{{ lab.organization }}"

controller_roles:
  - user: "{{ student_username }}"
    credentials:
      - "{{ lab.credential.ssh.name }}"
    role: read
  - user: "{{ student_username }}"
    credentials:
      - "{{ lab.credential.ssh.name }}"
    role: use
  - user: "{{ student_username }}"
    inventories:
      - "{{ lab.inventory.name }}"
    role: read
  - user: "{{ student_username }}"
    inventories:
      - "{{ lab.inventory.name }}"
    role: use
  - user: "{{ student_username }}"
    projects:
      - "{{ lab.project.name }}"
    role: read
  - user: "{{ student_username }}"
    projects:
      - "{{ lab.project.name }}"
    role: update
  - user: "{{ student_username }}"
    organization: "{{ lab.organization }}"
    role: workflow_admin
  - user: "{{ student_username }}"
    organization: "{{ lab.organization }}"
    role: job_template_admin
