<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1174.vdcb_d054cf74a_">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2064.v5eef7d0982b_e"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2064.v5eef7d0982b_e">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2682.va_473dcddc941">
    <script>#!/usr/bin/env groovy

pipeline {
    agent any
    stages {
        stage(&apos;SCM Get Code&apos;) {
            steps {
                checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], userRemoteConfigs: [[url: &apos;https://github.com/craig-br/juice-shop.git&apos;]]])
            }
        }
        
        // Takes too long for demo
        // stage(&apos;Code Analysis&apos;) {
        //     node {
        //         def scannerHome = tool &apos;sonarqube&apos;
        //             withSonarQubeEnv(&apos;sonarqube&apos;){
        //                 // sh &quot;${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=craig-br_juice-shop2 -Dsonar.sources=. -Dsonar.exclusions=node_modules/*/**,test/**/* -Dsonar.tests=test&quot;
        //                 sh &quot;${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=craig-br_juice-shop -Dsonar.sources=. -Dsonar.exclusions=node_modules/*/**,test/**/*,frontend/node_modules/*/**&quot;
        //         }
        //     }
        // }

        // stage(&apos;Code Analysis&apos;) {
        //     steps {
        //         nodejs(nodeJSInstallationName: &apos;nodejs&apos;) {
        //             sh &quot;&quot;&quot;
        //                 npm install
        //                 npm run lint
        //             &quot;&quot;&quot;
        //         }
        //     }
        // }
        
        // Takes too long. need more power captain
        // stage(&apos;Unit Tests&apos;) {
        //     steps {
        //         nodejs(nodeJSInstallationName: &apos;nodejs&apos;) {
        //             sh &quot;npm test&quot;
        //         }
        //     }
        // }
        
        stage(&apos;Build and Tag&apos;) {
            steps {
                nodejs(nodeJSInstallationName: &apos;nodejs&apos;) {
                    withCredentials([
                        usernamePassword(credentialsId: &apos;juiceshop_repo&apos;, 
                            passwordVariable: &apos;GITHUB_TOKEN&apos;,
                            usernameVariable: &apos;GITHUB_USERNAME&apos;)]) {
                        script {
                            // Determine version number for next release.
                            env.pkgVersion = sh (
                              script: &apos;git tag --list | sort --version-sort --reverse | head -n1 | cut -d &quot;-&quot; -f1&apos;,
                              returnStdout: true
                            ).trim()
                            env.newPkgVersion = bumpPatchVersion(pkgVersion)
                        }
                        
                        // Configure author for tag and auth credentials for pushing tag to GitHub.
                        // See https://git-scm.com/docs/git-credential-store.
                        sh &quot;&quot;&quot;
                            git config --replace-all user.name ${env.GITHUB_USERNAME}
                            git config --replace-all user.email ${env.GITHUB_USERNAME}
                            git config credential.helper store
                            echo https://${env.GITHUB_USERNAME}:${env.GITHUB_TOKEN}@github.com &gt;&gt; \$HOME/.git-credentials
                        &quot;&quot;&quot;
                        
                        // Bump the package version.
                        sh &quot;&quot;&quot;
                            git checkout master --force
                            git tag ${newPkgVersion}
                            npm --no-git-tag-version version ${newPkgVersion}
                            git add .
                            git commit -m ${newPkgVersion}
                            git push origin master --force
                            git push https://github.com/craig-br/juice-shop.git ${newPkgVersion}
                        &quot;&quot;&quot;
                        //sleep 2 // Give GitHub a moment to realize the tag exists
                        // Install and Create the Dist Package. No time in demo
                        //sh &quot;npm install --production &amp;&amp; grunt package&quot;
                    }
                }
            }
        }
        
        // Create a release and deploy instances with Tower
        stage (&apos;Controller - Publish and Cloud&apos;) {
            parallel {
                stage(&apos;Controller - Create Release&apos;) {
                    steps {
                        ansibleTower(
                            towerServer: &apos;JuiceShop controller&apos;,
                            templateType: &apos;job&apos;,
                            jobTemplate: &apos;GitHub Release&apos;,
                            importTowerLogs: true,
                            removeColor: false,
                            verbose: true,
                                extraVars: &apos;&apos;&apos;---
                                pkg_version: $pkgVersion
                                tag_name: $newPkgVersion
                                &apos;&apos;&apos;
                        )                         
                    }
                }
                // Create instances with controller
                stage(&apos;Controller - Instances&apos;) {
                    steps {
                        ansibleTower(
                            towerServer: &apos;JuiceShop controller&apos;,
                            templateType: &apos;workflow&apos;,
                            jobTemplate: &apos;Cloud Instances Workflow&apos;,
                            importTowerLogs: true,
                            removeColor: false,
                            verbose: true,
                            credential: &apos;&apos;,
                        )   
                    }
                }
            }
        }
        
        // Deploy app and create VS
        stage (&apos;Controller - Deploy App and Net&apos;) {
            parallel {
                stage(&apos;Controller - Deploy App&apos;) {
                    steps {
                        ansibleTower(
                            towerServer: &apos;JuiceShop controller&apos;,
                            templateType: &apos;job&apos;,
                            jobTemplate: &apos;Deploy JuiceShop App&apos;,
                            importTowerLogs: true,
                            removeColor: false,
                            verbose: true,
                            extraVars: &apos;&apos;&apos;---
                            pkg_version: $pkgVersion
                            tag_name: $newPkgVersion
                            &apos;&apos;&apos;
                        )                       
                    }
                }
                stage(&apos;Controller - Net&apos;) {
                    steps {
                        ansibleTower(
                            towerServer: &apos;JuiceShop controller&apos;,
                            templateType: &apos;job&apos;,
                            jobTemplate: &apos;Create JuiceShop App VS&apos;,
                            importTowerLogs: true,
                            removeColor: false,
                            verbose: true,
                        )
                    }
                }
            }
        }
    }
}


// Increment the minor part of a `MAJOR.MINOR.PATCH` semver version.
String bumpMinorVersion(String version) {
    def parts = version.tokenize(&apos;.&apos;)
    if (parts.size() != 3) {
        error &quot;${version} is not a valid MAJOR.MINOR.PATCH version&quot;
    }
    def newMinorVersion = parts[1].toInteger() + 1

    return &quot;${parts[0]}.${newMinorVersion}.${parts[2]}&quot;
}

// Increment the patch part of a `MAJOR.MINOR.PATCH` semver version.
String bumpPatchVersion(String version) {
    def parts = version.tokenize(&apos;.&apos;)
    if (parts.size() != 3) {
        error &quot;${version} is not a valid MAJOR.MINOR.PATCH version&quot;
    }
    def newPatchVersion = parts[2].toInteger() + 1

    return &quot;${parts[0]}.${parts[1]}.${newPatchVersion}&quot;
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>