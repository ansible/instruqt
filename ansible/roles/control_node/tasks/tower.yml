---
- name: Download Ansible Tower
  get_url:
    #    url: '{{ tower_installer_url | default(default_tower_url) }}'
    url: 'https://releases.ansible.com/ansible-tower/setup-bundle/ansible-tower-setup-bundle-3.7.3-1.tar.gz'
    dest: /tmp/tower.tar.gz

- name: Create directory for Ansible Tower
  file: path=/tmp/tower_install state=directory

- name: Extract Ansible Tower install
  unarchive:
    src: /tmp/tower.tar.gz
    dest: /tmp/tower_install
    remote_src: true
    extra_opts: ['--strip-components=1', '--show-stored-names']

- name: template inventory file for Ansible Tower Install
  template:
    src: ../templates/tower_install.j2
    dest: /tmp/tower_install/inventory
  when: create_cluster is not defined or not create_cluster|bool

- name: template inventory file for Ansible Tower Install
  template:
    src: ../templates/tower_cluster_install.j2
    dest: /tmp/tower_install/inventory
  when: create_cluster is defined and create_cluster|bool

- name: run the Ansible Tower installer
  shell: ./setup.sh
  args:
    chdir: /tmp/tower_install
  async: 1400
  poll: 15

- name: wait for Ansible Tower to be up
  uri:
    url: https://localhost/api/v2/ping/
    method: GET
    user: admin
    password: "{{ admin_password }}"
    validate_certs: false
  register: check2
  until: check2.json is defined
  retries: 10
  delay: 30

- name: Display /api/v2/ping results
  debug:
    msg: '{{ check2.json }}'

- name: install ansible-tower-cli and requests
  become: true
  pip:
    name:
      - ansible-tower-cli
      - "requests==2.6.0"
    state: latest

- name: Install venv
  include_tasks: venv.yml

- name: add student user
  tower_user:
    username: "admin"
    password: "{{ admin_password }}"
    email: fake@fake.com
    state: present
    superuser: true
    tower_username: admin
    tower_password: "{{ admin_password }}"
    tower_host: "{{ ansible_host }}"
    tower_verify_ssl: false

- name: Post license key
  uri:
    url: https://{{ansible_host}}/api/v2/config/
    method: POST
    user: admin
    password: "{{ admin_password }}"
    body: "{{ tower_license }}"
    body_format: json
    validate_certs: false
    force_basic_auth: true
  when: not use_manifest

- block:
    - name: Load manifest into variable
      local_action:
        module: slurp
        src: "{{ playbook_dir }}/manifest.zip"
      register: manifest_file

    - name: Post manifest file
      uri:
        url: https://{{ansible_host}}/api/v2/config/
        method: POST
        user: admin
        password: "{{admin_password}}"
        body: '{ "eula_accepted": true, "manifest": "{{ manifest_file.content }}" }'
        body_format: json
        validate_certs: false
        force_basic_auth: true
  when: use_manifest
